
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b7c  08003b7c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b7c  08003b7c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b7c  08003b7c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000005c  08003be0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003be0  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099ef  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d74  00000000  00000000  00029ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  0002b830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006cb  00000000  00000000  0002c120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017879  00000000  00000000  0002c7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b363  00000000  00000000  00044064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083c76  00000000  00000000  0004f3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027d0  00000000  00000000  000d3040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000d5810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003af4 	.word	0x08003af4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003af4 	.word	0x08003af4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b1e      	ldr	r3, [pc, #120]	; (80001ec <MX_GPIO_Init+0x90>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a1d      	ldr	r2, [pc, #116]	; (80001ec <MX_GPIO_Init+0x90>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b1b      	ldr	r3, [pc, #108]	; (80001ec <MX_GPIO_Init+0x90>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b18      	ldr	r3, [pc, #96]	; (80001ec <MX_GPIO_Init+0x90>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a17      	ldr	r2, [pc, #92]	; (80001ec <MX_GPIO_Init+0x90>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b15      	ldr	r3, [pc, #84]	; (80001ec <MX_GPIO_Init+0x90>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b12      	ldr	r3, [pc, #72]	; (80001ec <MX_GPIO_Init+0x90>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a11      	ldr	r2, [pc, #68]	; (80001ec <MX_GPIO_Init+0x90>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <MX_GPIO_Init+0x90>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001be:	480c      	ldr	r0, [pc, #48]	; (80001f0 <MX_GPIO_Init+0x94>)
 80001c0:	f000 fe92 	bl	8000ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ca:	2301      	movs	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ce:	2300      	movs	r3, #0
 80001d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001d2:	2303      	movs	r3, #3
 80001d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001d6:	f107 0310 	add.w	r3, r7, #16
 80001da:	4619      	mov	r1, r3
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <MX_GPIO_Init+0x94>)
 80001de:	f000 fcff 	bl	8000be0 <HAL_GPIO_Init>

}
 80001e2:	bf00      	nop
 80001e4:	3720      	adds	r7, #32
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40021000 	.word	0x40021000
 80001f0:	40011000 	.word	0x40011000

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f8:	f000 fad0 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fc:	f000 f818 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000200:	f7ff ffac 	bl	800015c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000204:	f000 f8bc 	bl	8000380 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000208:	f000 f9fe 	bl	8000608 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SPIS_Init_IT();
 800020c:	f000 f93c 	bl	8000488 <SPIS_Init_IT>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)RxBuffer,LENGTH);
 8000210:	2201      	movs	r2, #1
 8000212:	4904      	ldr	r1, [pc, #16]	; (8000224 <main+0x30>)
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <main+0x34>)
 8000216:	f002 fa15 	bl	8002644 <HAL_UART_Receive_IT>
  USART_printf("Init ok");
 800021a:	4804      	ldr	r0, [pc, #16]	; (800022c <main+0x38>)
 800021c:	f000 fa72 	bl	8000704 <USART_printf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000220:	e7fe      	b.n	8000220 <main+0x2c>
 8000222:	bf00      	nop
 8000224:	20000078 	.word	0x20000078
 8000228:	200000e0 	.word	0x200000e0
 800022c:	08003b0c 	.word	0x08003b0c

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	; 0x40
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 ffc6 	bl	80031d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000252:	2301      	movs	r3, #1
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000264:	2302      	movs	r3, #2
 8000266:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fe4d 	bl	8000f18 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000284:	f000 f876 	bl	8000374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028c:	2302      	movs	r3, #2
 800028e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2102      	movs	r1, #2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 f8ba 	bl	800141c <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ae:	f000 f861 	bl	8000374 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3740      	adds	r7, #64	; 0x40
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <HAL_UART_RxCpltCallback+0x40>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d112      	bne.n	80002f4 <HAL_UART_RxCpltCallback+0x38>
	{

		if(RxBuffer[0]=='t')
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <HAL_UART_RxCpltCallback+0x44>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b74      	cmp	r3, #116	; 0x74
 80002d4:	d10e      	bne.n	80002f4 <HAL_UART_RxCpltCallback+0x38>
		{
			USART_printf("OK");
 80002d6:	480b      	ldr	r0, [pc, #44]	; (8000304 <HAL_UART_RxCpltCallback+0x48>)
 80002d8:	f000 fa14 	bl	8000704 <USART_printf>
			HAL_SPI_Transmit(&hspi1,(uint8_t *)SPISTxBuffer,LENGTH,HAL_MAX_DELAY);
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002e0:	2201      	movs	r2, #1
 80002e2:	4909      	ldr	r1, [pc, #36]	; (8000308 <HAL_UART_RxCpltCallback+0x4c>)
 80002e4:	4809      	ldr	r0, [pc, #36]	; (800030c <HAL_UART_RxCpltCallback+0x50>)
 80002e6:	f001 faab 	bl	8001840 <HAL_SPI_Transmit>
			HAL_UART_Receive_IT(&huart1,(uint8_t *)RxBuffer,LENGTH);
 80002ea:	2201      	movs	r2, #1
 80002ec:	4904      	ldr	r1, [pc, #16]	; (8000300 <HAL_UART_RxCpltCallback+0x44>)
 80002ee:	4808      	ldr	r0, [pc, #32]	; (8000310 <HAL_UART_RxCpltCallback+0x54>)
 80002f0:	f002 f9a8 	bl	8002644 <HAL_UART_Receive_IT>
		}

	}
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40013800 	.word	0x40013800
 8000300:	20000078 	.word	0x20000078
 8000304:	08003b14 	.word	0x08003b14
 8000308:	2000007c 	.word	0x2000007c
 800030c:	20000084 	.word	0x20000084
 8000310:	200000e0 	.word	0x200000e0

08000314 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	if(hspi==&hspi1)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a11      	ldr	r2, [pc, #68]	; (8000364 <HAL_SPI_RxCpltCallback+0x50>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d11b      	bne.n	800035c <HAL_SPI_RxCpltCallback+0x48>
	{
		USART_printf("%d\n",SPISRxBuffer[0]);
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <HAL_SPI_RxCpltCallback+0x54>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4619      	mov	r1, r3
 800032a:	4810      	ldr	r0, [pc, #64]	; (800036c <HAL_SPI_RxCpltCallback+0x58>)
 800032c:	f000 f9ea 	bl	8000704 <USART_printf>
		if(SPISRxBuffer[0]==0x11)
 8000330:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <HAL_SPI_RxCpltCallback+0x54>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b11      	cmp	r3, #17
 8000336:	d10c      	bne.n	8000352 <HAL_SPI_RxCpltCallback+0x3e>
		{
			USART_printf("%d\n",SPISRxBuffer[0]);
 8000338:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <HAL_SPI_RxCpltCallback+0x54>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	4619      	mov	r1, r3
 800033e:	480b      	ldr	r0, [pc, #44]	; (800036c <HAL_SPI_RxCpltCallback+0x58>)
 8000340:	f000 f9e0 	bl	8000704 <USART_printf>
			HAL_SPI_Transmit(&hspi1,(uint8_t *)SPISTxBuffer,LENGTH,HAL_MAX_DELAY);
 8000344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000348:	2201      	movs	r2, #1
 800034a:	4909      	ldr	r1, [pc, #36]	; (8000370 <HAL_SPI_RxCpltCallback+0x5c>)
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <HAL_SPI_RxCpltCallback+0x50>)
 800034e:	f001 fa77 	bl	8001840 <HAL_SPI_Transmit>
		}
		HAL_SPI_Receive_IT(&hspi1,(uint8_t *)SPISRxBuffer,LENGTH);
 8000352:	2201      	movs	r2, #1
 8000354:	4904      	ldr	r1, [pc, #16]	; (8000368 <HAL_SPI_RxCpltCallback+0x54>)
 8000356:	4803      	ldr	r0, [pc, #12]	; (8000364 <HAL_SPI_RxCpltCallback+0x50>)
 8000358:	f001 fbb6 	bl	8001ac8 <HAL_SPI_Receive_IT>
	}
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000084 	.word	0x20000084
 8000368:	20000080 	.word	0x20000080
 800036c:	08003b18 	.word	0x08003b18
 8000370:	2000007c 	.word	0x2000007c

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037c:	e7fe      	b.n	800037c <Error_Handler+0x8>
	...

08000380 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_SPI1_Init+0x5c>)
 8000386:	4a16      	ldr	r2, [pc, #88]	; (80003e0 <MX_SPI1_Init+0x60>)
 8000388:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_SPI1_Init+0x5c>)
 800038c:	2200      	movs	r2, #0
 800038e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_SPI1_Init+0x5c>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_SPI1_Init+0x5c>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_SPI1_Init+0x5c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_SPI1_Init+0x5c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_SPI1_Init+0x5c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <MX_SPI1_Init+0x5c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_SPI1_Init+0x5c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <MX_SPI1_Init+0x5c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_SPI1_Init+0x5c>)
 80003c2:	220a      	movs	r2, #10
 80003c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_SPI1_Init+0x5c>)
 80003c8:	f001 f9b6 	bl	8001738 <HAL_SPI_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 80003d2:	f7ff ffcf 	bl	8000374 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000084 	.word	0x20000084
 80003e0:	40013000 	.word	0x40013000

080003e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b088      	sub	sp, #32
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a1f      	ldr	r2, [pc, #124]	; (800047c <HAL_SPI_MspInit+0x98>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d137      	bne.n	8000474 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000404:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <HAL_SPI_MspInit+0x9c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a1d      	ldr	r2, [pc, #116]	; (8000480 <HAL_SPI_MspInit+0x9c>)
 800040a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <HAL_SPI_MspInit+0x9c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_SPI_MspInit+0x9c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a17      	ldr	r2, [pc, #92]	; (8000480 <HAL_SPI_MspInit+0x9c>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_SPI_MspInit+0x9c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000434:	23b0      	movs	r3, #176	; 0xb0
 8000436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	480f      	ldr	r0, [pc, #60]	; (8000484 <HAL_SPI_MspInit+0xa0>)
 8000448:	f000 fbca 	bl	8000be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800044c:	2340      	movs	r3, #64	; 0x40
 800044e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000450:	2302      	movs	r3, #2
 8000452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000454:	2303      	movs	r3, #3
 8000456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4809      	ldr	r0, [pc, #36]	; (8000484 <HAL_SPI_MspInit+0xa0>)
 8000460:	f000 fbbe 	bl	8000be0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2100      	movs	r1, #0
 8000468:	2023      	movs	r0, #35	; 0x23
 800046a:	f000 fad0 	bl	8000a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800046e:	2023      	movs	r0, #35	; 0x23
 8000470:	f000 fae9 	bl	8000a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40013000 	.word	0x40013000
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800

08000488 <SPIS_Init_IT>:
  }
}

/* USER CODE BEGIN 1 */
void SPIS_Init_IT(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <SPIS_Init_IT+0x20>)
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <SPIS_Init_IT+0x24>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
	memset(SPISTxBuffer,0,LENGTH);
	memset(SPISRxBuffer,0,LENGTH);
	HAL_SPI_Receive_IT(&hspi1,(uint8_t *)SPISRxBuffer,LENGTH);
 8000498:	2201      	movs	r2, #1
 800049a:	4904      	ldr	r1, [pc, #16]	; (80004ac <SPIS_Init_IT+0x24>)
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <SPIS_Init_IT+0x28>)
 800049e:	f001 fb13 	bl	8001ac8 <HAL_SPI_Receive_IT>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	2000007c 	.word	0x2000007c
 80004ac:	20000080 	.word	0x20000080
 80004b0:	20000084 	.word	0x20000084

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a14      	ldr	r2, [pc, #80]	; (8000510 <HAL_MspInit+0x5c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <HAL_MspInit+0x5c>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <HAL_MspInit+0x60>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <HAL_MspInit+0x60>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000
 8000514:	40010000 	.word	0x40010000

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800051c:	e7fe      	b.n	800051c <NMI_Handler+0x4>

0800051e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <MemManage_Handler+0x4>

0800052a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <UsageFault_Handler+0x4>

08000536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f963 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <SPI1_IRQHandler+0x10>)
 800056e:	f001 fbdd 	bl	8001d2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000084 	.word	0x20000084

0800057c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <USART1_IRQHandler+0x10>)
 8000582:	f002 f885 	bl	8002690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200000e0 	.word	0x200000e0

08000590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <_sbrk+0x5c>)
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <_sbrk+0x60>)
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <_sbrk+0x64>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <_sbrk+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <_sbrk+0x64>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d207      	bcs.n	80005d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c0:	f002 fe0e 	bl	80031e0 <__errno>
 80005c4:	4603      	mov	r3, r0
 80005c6:	220c      	movs	r2, #12
 80005c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ce:	e009      	b.n	80005e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <_sbrk+0x64>)
 80005e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20005000 	.word	0x20005000
 80005f0:	00000400 	.word	0x00000400
 80005f4:	200000dc 	.word	0x200000dc
 80005f8:	20000278 	.word	0x20000278

080005fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_USART1_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000640:	f001 ff2d 	bl	800249e <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800064a:	f7ff fe93 	bl	8000374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000e0 	.word	0x200000e0
 8000658:	40013800 	.word	0x40013800

0800065c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <HAL_UART_MspInit+0x9c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d139      	bne.n	80006f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <HAL_UART_MspInit+0xa0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1e      	ldr	r2, [pc, #120]	; (80006fc <HAL_UART_MspInit+0xa0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <HAL_UART_MspInit+0xa0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_UART_MspInit+0xa0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a18      	ldr	r2, [pc, #96]	; (80006fc <HAL_UART_MspInit+0xa0>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_UART_MspInit+0xa0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <HAL_UART_MspInit+0xa4>)
 80006c2:	f000 fa8d 	bl	8000be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <HAL_UART_MspInit+0xa4>)
 80006dc:	f000 fa80 	bl	8000be0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2025      	movs	r0, #37	; 0x25
 80006e6:	f000 f992 	bl	8000a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006ea:	2025      	movs	r0, #37	; 0x25
 80006ec:	f000 f9ab 	bl	8000a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40013800 	.word	0x40013800
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010800 	.word	0x40010800

08000704 <USART_printf>:
  }
}

/* USER CODE BEGIN 1 */
void USART_printf(char *fmt, ...)
{
 8000704:	b40f      	push	{r0, r1, r2, r3}
 8000706:	b580      	push	{r7, lr}
 8000708:	b0a2      	sub	sp, #136	; 0x88
 800070a:	af00      	add	r7, sp, #0
	va_list ap;
	char str[128];

	va_start(ap,fmt);
 800070c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	vsprintf(str,fmt,ap);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800071a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fd4c 	bl	80031bc <vsiprintf>
	va_end(ap);
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str),0xFFFF);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd10 	bl	800014c <strlen>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	1d39      	adds	r1, r7, #4
 8000732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <USART_printf+0x48>)
 8000738:	f001 ff01 	bl	800253e <HAL_UART_Transmit>
}
 800073c:	bf00      	nop
 800073e:	3788      	adds	r7, #136	; 0x88
 8000740:	46bd      	mov	sp, r7
 8000742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000746:	b004      	add	sp, #16
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	200000e0 	.word	0x200000e0

08000750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000750:	f7ff ff54 	bl	80005fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000756:	490c      	ldr	r1, [pc, #48]	; (8000788 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <LoopFillZerobss+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a09      	ldr	r2, [pc, #36]	; (8000790 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800076c:	4c09      	ldr	r4, [pc, #36]	; (8000794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077a:	f002 fd37 	bl	80031ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fd39 	bl	80001f4 <main>
  bx lr
 8000782:	4770      	bx	lr
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800078c:	08003b84 	.word	0x08003b84
  ldr r2, =_sbss
 8000790:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000794:	20000274 	.word	0x20000274

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f923 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fe7c 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f93b 	bl	8000a62 <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000804:	f000 f903 	bl	8000a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <HAL_IncTick+0x20>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000008 	.word	0x20000008
 8000848:	20000128 	.word	0x20000128

0800084c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000128 	.word	0x20000128

08000860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	60d3      	str	r3, [r2, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	f003 0307 	and.w	r3, r3, #7
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db0b      	blt.n	80008ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f003 021f 	and.w	r2, r3, #31
 80008dc:	4906      	ldr	r1, [pc, #24]	; (80008f8 <__NVIC_EnableIRQ+0x34>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	095b      	lsrs	r3, r3, #5
 80008e4:	2001      	movs	r0, #1
 80008e6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	e000e100 	.word	0xe000e100

080008fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db0a      	blt.n	8000926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <__NVIC_SetPriority+0x4c>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	440b      	add	r3, r1
 8000920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000924:	e00a      	b.n	800093c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4908      	ldr	r1, [pc, #32]	; (800094c <__NVIC_SetPriority+0x50>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	3b04      	subs	r3, #4
 8000934:	0112      	lsls	r2, r2, #4
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	440b      	add	r3, r1
 800093a:	761a      	strb	r2, [r3, #24]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f1c3 0307 	rsb	r3, r3, #7
 800096a:	2b04      	cmp	r3, #4
 800096c:	bf28      	it	cs
 800096e:	2304      	movcs	r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3304      	adds	r3, #4
 8000976:	2b06      	cmp	r3, #6
 8000978:	d902      	bls.n	8000980 <NVIC_EncodePriority+0x30>
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3b03      	subs	r3, #3
 800097e:	e000      	b.n	8000982 <NVIC_EncodePriority+0x32>
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43da      	mvns	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	43d9      	mvns	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	4313      	orrs	r3, r2
         );
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3724      	adds	r7, #36	; 0x24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c4:	d301      	bcc.n	80009ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00f      	b.n	80009ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <SysTick_Config+0x40>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d2:	210f      	movs	r1, #15
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009d8:	f7ff ff90 	bl	80008fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SysTick_Config+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SysTick_Config+0x40>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff2d 	bl	8000860 <__NVIC_SetPriorityGrouping>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a20:	f7ff ff42 	bl	80008a8 <__NVIC_GetPriorityGrouping>
 8000a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	6978      	ldr	r0, [r7, #20]
 8000a2c:	f7ff ff90 	bl	8000950 <NVIC_EncodePriority>
 8000a30:	4602      	mov	r2, r0
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff5f 	bl	80008fc <__NVIC_SetPriority>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff35 	bl	80008c4 <__NVIC_EnableIRQ>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffa2 	bl	80009b4 <SysTick_Config>
 8000a70:	4603      	mov	r3, r0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d008      	beq.n	8000aa4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2204      	movs	r2, #4
 8000a96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e020      	b.n	8000ae6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 020e 	bic.w	r2, r2, #14
 8000ab2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f022 0201 	bic.w	r2, r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d005      	beq.n	8000b14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
 8000b12:	e051      	b.n	8000bb8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 020e 	bic.w	r2, r2, #14
 8000b22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f022 0201 	bic.w	r2, r2, #1
 8000b32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <HAL_DMA_Abort_IT+0xd4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d029      	beq.n	8000b92 <HAL_DMA_Abort_IT+0xa2>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <HAL_DMA_Abort_IT+0xd8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d022      	beq.n	8000b8e <HAL_DMA_Abort_IT+0x9e>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <HAL_DMA_Abort_IT+0xdc>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d01a      	beq.n	8000b88 <HAL_DMA_Abort_IT+0x98>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <HAL_DMA_Abort_IT+0xe0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d012      	beq.n	8000b82 <HAL_DMA_Abort_IT+0x92>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <HAL_DMA_Abort_IT+0xe4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d00a      	beq.n	8000b7c <HAL_DMA_Abort_IT+0x8c>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <HAL_DMA_Abort_IT+0xe8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d102      	bne.n	8000b76 <HAL_DMA_Abort_IT+0x86>
 8000b70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b74:	e00e      	b.n	8000b94 <HAL_DMA_Abort_IT+0xa4>
 8000b76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b7a:	e00b      	b.n	8000b94 <HAL_DMA_Abort_IT+0xa4>
 8000b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b80:	e008      	b.n	8000b94 <HAL_DMA_Abort_IT+0xa4>
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	e005      	b.n	8000b94 <HAL_DMA_Abort_IT+0xa4>
 8000b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8c:	e002      	b.n	8000b94 <HAL_DMA_Abort_IT+0xa4>
 8000b8e:	2310      	movs	r3, #16
 8000b90:	e000      	b.n	8000b94 <HAL_DMA_Abort_IT+0xa4>
 8000b92:	2301      	movs	r3, #1
 8000b94:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <HAL_DMA_Abort_IT+0xec>)
 8000b96:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	4798      	blx	r3
    } 
  }
  return status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40020008 	.word	0x40020008
 8000bc8:	4002001c 	.word	0x4002001c
 8000bcc:	40020030 	.word	0x40020030
 8000bd0:	40020044 	.word	0x40020044
 8000bd4:	40020058 	.word	0x40020058
 8000bd8:	4002006c 	.word	0x4002006c
 8000bdc:	40020000 	.word	0x40020000

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf2:	e169      	b.n	8000ec8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	f040 8158 	bne.w	8000ec2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a9a      	ldr	r2, [pc, #616]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d05e      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c1c:	4a98      	ldr	r2, [pc, #608]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d875      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c22:	4a98      	ldr	r2, [pc, #608]	; (8000e84 <HAL_GPIO_Init+0x2a4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d058      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c28:	4a96      	ldr	r2, [pc, #600]	; (8000e84 <HAL_GPIO_Init+0x2a4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d86f      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c2e:	4a96      	ldr	r2, [pc, #600]	; (8000e88 <HAL_GPIO_Init+0x2a8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d052      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c34:	4a94      	ldr	r2, [pc, #592]	; (8000e88 <HAL_GPIO_Init+0x2a8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d869      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c3a:	4a94      	ldr	r2, [pc, #592]	; (8000e8c <HAL_GPIO_Init+0x2ac>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d04c      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c40:	4a92      	ldr	r2, [pc, #584]	; (8000e8c <HAL_GPIO_Init+0x2ac>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d863      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c46:	4a92      	ldr	r2, [pc, #584]	; (8000e90 <HAL_GPIO_Init+0x2b0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d046      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
 8000c4c:	4a90      	ldr	r2, [pc, #576]	; (8000e90 <HAL_GPIO_Init+0x2b0>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d85d      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c52:	2b12      	cmp	r3, #18
 8000c54:	d82a      	bhi.n	8000cac <HAL_GPIO_Init+0xcc>
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	d859      	bhi.n	8000d0e <HAL_GPIO_Init+0x12e>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <HAL_GPIO_Init+0x80>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000cdb 	.word	0x08000cdb
 8000c64:	08000cb5 	.word	0x08000cb5
 8000c68:	08000cc7 	.word	0x08000cc7
 8000c6c:	08000d09 	.word	0x08000d09
 8000c70:	08000d0f 	.word	0x08000d0f
 8000c74:	08000d0f 	.word	0x08000d0f
 8000c78:	08000d0f 	.word	0x08000d0f
 8000c7c:	08000d0f 	.word	0x08000d0f
 8000c80:	08000d0f 	.word	0x08000d0f
 8000c84:	08000d0f 	.word	0x08000d0f
 8000c88:	08000d0f 	.word	0x08000d0f
 8000c8c:	08000d0f 	.word	0x08000d0f
 8000c90:	08000d0f 	.word	0x08000d0f
 8000c94:	08000d0f 	.word	0x08000d0f
 8000c98:	08000d0f 	.word	0x08000d0f
 8000c9c:	08000d0f 	.word	0x08000d0f
 8000ca0:	08000d0f 	.word	0x08000d0f
 8000ca4:	08000cbd 	.word	0x08000cbd
 8000ca8:	08000cd1 	.word	0x08000cd1
 8000cac:	4a79      	ldr	r2, [pc, #484]	; (8000e94 <HAL_GPIO_Init+0x2b4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d013      	beq.n	8000cda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cb2:	e02c      	b.n	8000d0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	623b      	str	r3, [r7, #32]
          break;
 8000cba:	e029      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	e024      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	3308      	adds	r3, #8
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e01f      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	330c      	adds	r3, #12
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e01a      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d102      	bne.n	8000ce8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	623b      	str	r3, [r7, #32]
          break;
 8000ce6:	e013      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d105      	bne.n	8000cfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	611a      	str	r2, [r3, #16]
          break;
 8000cfa:	e009      	b.n	8000d10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	615a      	str	r2, [r3, #20]
          break;
 8000d06:	e003      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
          break;
 8000d0c:	e000      	b.n	8000d10 <HAL_GPIO_Init+0x130>
          break;
 8000d0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2bff      	cmp	r3, #255	; 0xff
 8000d14:	d801      	bhi.n	8000d1a <HAL_GPIO_Init+0x13a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	e001      	b.n	8000d1e <HAL_GPIO_Init+0x13e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bff      	cmp	r3, #255	; 0xff
 8000d24:	d802      	bhi.n	8000d2c <HAL_GPIO_Init+0x14c>
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	e002      	b.n	8000d32 <HAL_GPIO_Init+0x152>
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	3b08      	subs	r3, #8
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	210f      	movs	r1, #15
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	401a      	ands	r2, r3
 8000d44:	6a39      	ldr	r1, [r7, #32]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 80b1 	beq.w	8000ec2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d60:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a4c      	ldr	r2, [pc, #304]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b4a      	ldr	r3, [pc, #296]	; (8000e98 <HAL_GPIO_Init+0x2b8>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d78:	4a48      	ldr	r2, [pc, #288]	; (8000e9c <HAL_GPIO_Init+0x2bc>)
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a40      	ldr	r2, [pc, #256]	; (8000ea0 <HAL_GPIO_Init+0x2c0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d013      	beq.n	8000dcc <HAL_GPIO_Init+0x1ec>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3f      	ldr	r2, [pc, #252]	; (8000ea4 <HAL_GPIO_Init+0x2c4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d00d      	beq.n	8000dc8 <HAL_GPIO_Init+0x1e8>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a3e      	ldr	r2, [pc, #248]	; (8000ea8 <HAL_GPIO_Init+0x2c8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d007      	beq.n	8000dc4 <HAL_GPIO_Init+0x1e4>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3d      	ldr	r2, [pc, #244]	; (8000eac <HAL_GPIO_Init+0x2cc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d101      	bne.n	8000dc0 <HAL_GPIO_Init+0x1e0>
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e006      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	e004      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd0:	f002 0203 	and.w	r2, r2, #3
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dde:	492f      	ldr	r1, [pc, #188]	; (8000e9c <HAL_GPIO_Init+0x2bc>)
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	492c      	ldr	r1, [pc, #176]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4928      	ldr	r1, [pc, #160]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	4922      	ldr	r1, [pc, #136]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	60cb      	str	r3, [r1, #12]
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	491e      	ldr	r1, [pc, #120]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d006      	beq.n	8000e56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4918      	ldr	r1, [pc, #96]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	4914      	ldr	r1, [pc, #80]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d021      	beq.n	8000eb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]
 8000e7c:	e021      	b.n	8000ec2 <HAL_GPIO_Init+0x2e2>
 8000e7e:	bf00      	nop
 8000e80:	10320000 	.word	0x10320000
 8000e84:	10310000 	.word	0x10310000
 8000e88:	10220000 	.word	0x10220000
 8000e8c:	10210000 	.word	0x10210000
 8000e90:	10120000 	.word	0x10120000
 8000e94:	10110000 	.word	0x10110000
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	40011000 	.word	0x40011000
 8000eac:	40011400 	.word	0x40011400
 8000eb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4909      	ldr	r1, [pc, #36]	; (8000ee4 <HAL_GPIO_Init+0x304>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f47f ae8e 	bne.w	8000bf4 <HAL_GPIO_Init+0x14>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	372c      	adds	r7, #44	; 0x2c
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f04:	e003      	b.n	8000f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	611a      	str	r2, [r3, #16]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e272      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8087 	beq.w	8001046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f38:	4b92      	ldr	r3, [pc, #584]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 030c 	and.w	r3, r3, #12
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d00c      	beq.n	8000f5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f44:	4b8f      	ldr	r3, [pc, #572]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d112      	bne.n	8000f76 <HAL_RCC_OscConfig+0x5e>
 8000f50:	4b8c      	ldr	r3, [pc, #560]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5c:	d10b      	bne.n	8000f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5e:	4b89      	ldr	r3, [pc, #548]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d06c      	beq.n	8001044 <HAL_RCC_OscConfig+0x12c>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d168      	bne.n	8001044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e24c      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7e:	d106      	bne.n	8000f8e <HAL_RCC_OscConfig+0x76>
 8000f80:	4b80      	ldr	r3, [pc, #512]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a7f      	ldr	r2, [pc, #508]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e02e      	b.n	8000fec <HAL_RCC_OscConfig+0xd4>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x98>
 8000f96:	4b7b      	ldr	r3, [pc, #492]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a7a      	ldr	r2, [pc, #488]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b78      	ldr	r3, [pc, #480]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a77      	ldr	r2, [pc, #476]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e01d      	b.n	8000fec <HAL_RCC_OscConfig+0xd4>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0xbc>
 8000fba:	4b72      	ldr	r3, [pc, #456]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a71      	ldr	r2, [pc, #452]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a6e      	ldr	r2, [pc, #440]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e00b      	b.n	8000fec <HAL_RCC_OscConfig+0xd4>
 8000fd4:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a6a      	ldr	r2, [pc, #424]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b68      	ldr	r3, [pc, #416]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a67      	ldr	r2, [pc, #412]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fc2a 	bl	800084c <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fc26 	bl	800084c <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	; 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e200      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	4b5d      	ldr	r3, [pc, #372]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0xe4>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fc16 	bl	800084c <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fc12 	bl	800084c <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e1ec      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	4b53      	ldr	r3, [pc, #332]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x10c>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d063      	beq.n	800111a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800105e:	4b49      	ldr	r3, [pc, #292]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b08      	cmp	r3, #8
 8001068:	d11c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x18c>
 800106a:	4b46      	ldr	r3, [pc, #280]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d116      	bne.n	80010a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	4b43      	ldr	r3, [pc, #268]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_RCC_OscConfig+0x176>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d001      	beq.n	800108e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e1c0      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4939      	ldr	r1, [pc, #228]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	e03a      	b.n	800111a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d020      	beq.n	80010ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_RCC_OscConfig+0x270>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b2:	f7ff fbcb 	bl	800084c <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fbc7 	bl	800084c <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e1a1      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4927      	ldr	r1, [pc, #156]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_RCC_OscConfig+0x270>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fbaa 	bl	800084c <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fc:	f7ff fba6 	bl	800084c <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e180      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d03a      	beq.n	800119c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d019      	beq.n	8001162 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_RCC_OscConfig+0x274>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001134:	f7ff fb8a 	bl	800084c <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fb86 	bl	800084c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e160      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 face 	bl	80016fc <RCC_Delay>
 8001160:	e01c      	b.n	800119c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_RCC_OscConfig+0x274>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001168:	f7ff fb70 	bl	800084c <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116e:	e00f      	b.n	8001190 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fb6c 	bl	800084c <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d908      	bls.n	8001190 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e146      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	42420000 	.word	0x42420000
 800118c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001190:	4b92      	ldr	r3, [pc, #584]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1e9      	bne.n	8001170 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80a6 	beq.w	80012f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ae:	4b8b      	ldr	r3, [pc, #556]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10d      	bne.n	80011d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b88      	ldr	r3, [pc, #544]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a87      	ldr	r2, [pc, #540]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b85      	ldr	r3, [pc, #532]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d6:	4b82      	ldr	r3, [pc, #520]	; (80013e0 <HAL_RCC_OscConfig+0x4c8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e2:	4b7f      	ldr	r3, [pc, #508]	; (80013e0 <HAL_RCC_OscConfig+0x4c8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a7e      	ldr	r2, [pc, #504]	; (80013e0 <HAL_RCC_OscConfig+0x4c8>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fb2d 	bl	800084c <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f6:	f7ff fb29 	bl	800084c <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b64      	cmp	r3, #100	; 0x64
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e103      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	4b75      	ldr	r3, [pc, #468]	; (80013e0 <HAL_RCC_OscConfig+0x4c8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x312>
 800121c:	4b6f      	ldr	r3, [pc, #444]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4a6e      	ldr	r2, [pc, #440]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6213      	str	r3, [r2, #32]
 8001228:	e02d      	b.n	8001286 <HAL_RCC_OscConfig+0x36e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x334>
 8001232:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	4a69      	ldr	r2, [pc, #420]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	6213      	str	r3, [r2, #32]
 800123e:	4b67      	ldr	r3, [pc, #412]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a66      	ldr	r2, [pc, #408]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001244:	f023 0304 	bic.w	r3, r3, #4
 8001248:	6213      	str	r3, [r2, #32]
 800124a:	e01c      	b.n	8001286 <HAL_RCC_OscConfig+0x36e>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b05      	cmp	r3, #5
 8001252:	d10c      	bne.n	800126e <HAL_RCC_OscConfig+0x356>
 8001254:	4b61      	ldr	r3, [pc, #388]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4a60      	ldr	r2, [pc, #384]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6213      	str	r3, [r2, #32]
 8001260:	4b5e      	ldr	r3, [pc, #376]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4a5d      	ldr	r2, [pc, #372]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6213      	str	r3, [r2, #32]
 800126c:	e00b      	b.n	8001286 <HAL_RCC_OscConfig+0x36e>
 800126e:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4a5a      	ldr	r2, [pc, #360]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	6213      	str	r3, [r2, #32]
 800127a:	4b58      	ldr	r3, [pc, #352]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a57      	ldr	r2, [pc, #348]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001280:	f023 0304 	bic.w	r3, r3, #4
 8001284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d015      	beq.n	80012ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fadd 	bl	800084c <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001294:	e00a      	b.n	80012ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f7ff fad9 	bl	800084c <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0b1      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0ee      	beq.n	8001296 <HAL_RCC_OscConfig+0x37e>
 80012b8:	e014      	b.n	80012e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fac7 	bl	800084c <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c2:	f7ff fac3 	bl	800084c <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e09b      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	4b40      	ldr	r3, [pc, #256]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ee      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d105      	bne.n	80012f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ea:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8087 	beq.w	800140e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b08      	cmp	r3, #8
 800130a:	d061      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d146      	bne.n	80013a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001314:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <HAL_RCC_OscConfig+0x4cc>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fa97 	bl	800084c <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001322:	f7ff fa93 	bl	800084c <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e06d      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001348:	d108      	bne.n	800135c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	4921      	ldr	r1, [pc, #132]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a19      	ldr	r1, [r3, #32]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	430b      	orrs	r3, r1
 800136e:	491b      	ldr	r1, [pc, #108]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_RCC_OscConfig+0x4cc>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fa67 	bl	800084c <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff fa63 	bl	800084c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e03d      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x46a>
 80013a0:	e035      	b.n	800140e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_RCC_OscConfig+0x4cc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fa50 	bl	800084c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b0:	f7ff fa4c 	bl	800084c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e026      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x498>
 80013ce:	e01e      	b.n	800140e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e019      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40007000 	.word	0x40007000
 80013e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x500>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d106      	bne.n	800140a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0d0      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b6a      	ldr	r3, [pc, #424]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d910      	bls.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b67      	ldr	r3, [pc, #412]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 0207 	bic.w	r2, r3, #7
 8001446:	4965      	ldr	r1, [pc, #404]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b8      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001482:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800149a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	494d      	ldr	r1, [pc, #308]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d040      	beq.n	800153c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e073      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06b      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4936      	ldr	r1, [pc, #216]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff f99e 	bl	800084c <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff f99a 	bl	800084c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e053      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d210      	bcs.n	800156c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 0207 	bic.w	r2, r3, #7
 8001552:	4922      	ldr	r1, [pc, #136]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e032      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4916      	ldr	r1, [pc, #88]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015aa:	f000 f821 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 80015ae:	4602      	mov	r2, r0
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	490a      	ldr	r1, [pc, #40]	; (80015e4 <HAL_RCC_ClockConfig+0x1c8>)
 80015bc:	5ccb      	ldrb	r3, [r1, r3]
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1cc>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_ClockConfig+0x1d0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f8fc 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	08003b1c 	.word	0x08003b1c
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_RCC_GetSysClockFreq+0x94>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b04      	cmp	r3, #4
 8001618:	d002      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x30>
 800161a:	2b08      	cmp	r3, #8
 800161c:	d003      	beq.n	8001626 <HAL_RCC_GetSysClockFreq+0x36>
 800161e:	e027      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_RCC_GetSysClockFreq+0x98>)
 8001622:	613b      	str	r3, [r7, #16]
      break;
 8001624:	e027      	b.n	8001676 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	0c9b      	lsrs	r3, r3, #18
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d010      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_RCC_GetSysClockFreq+0x94>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0c5b      	lsrs	r3, r3, #17
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <HAL_RCC_GetSysClockFreq+0xa0>)
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_RCC_GetSysClockFreq+0x98>)
 8001652:	fb03 f202 	mul.w	r2, r3, r2
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e004      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	613b      	str	r3, [r7, #16]
      break;
 800166e:	e002      	b.n	8001676 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_GetSysClockFreq+0x98>)
 8001672:	613b      	str	r3, [r7, #16]
      break;
 8001674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001676:	693b      	ldr	r3, [r7, #16]
}
 8001678:	4618      	mov	r0, r3
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	007a1200 	.word	0x007a1200
 800168c:	08003b34 	.word	0x08003b34
 8001690:	08003b44 	.word	0x08003b44
 8001694:	003d0900 	.word	0x003d0900

08001698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800169c:	4b02      	ldr	r3, [pc, #8]	; (80016a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000000 	.word	0x20000000

080016ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016b0:	f7ff fff2 	bl	8001698 <HAL_RCC_GetHCLKFreq>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	4903      	ldr	r1, [pc, #12]	; (80016d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000
 80016d0:	08003b2c 	.word	0x08003b2c

080016d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016d8:	f7ff ffde 	bl	8001698 <HAL_RCC_GetHCLKFreq>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	0adb      	lsrs	r3, r3, #11
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	4903      	ldr	r1, [pc, #12]	; (80016f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	08003b2c 	.word	0x08003b2c

080016fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <RCC_Delay+0x34>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <RCC_Delay+0x38>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	0a5b      	lsrs	r3, r3, #9
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001718:	bf00      	nop
  }
  while (Delay --);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	60fa      	str	r2, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f9      	bne.n	8001718 <RCC_Delay+0x1c>
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	20000000 	.word	0x20000000
 8001734:	10624dd3 	.word	0x10624dd3

08001738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e076      	b.n	8001838 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	2b00      	cmp	r3, #0
 8001750:	d108      	bne.n	8001764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800175a:	d009      	beq.n	8001770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
 8001762:	e005      	b.n	8001770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d106      	bne.n	8001790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7fe fe2a 	bl	80003e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f4:	ea42 0103 	orr.w	r1, r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	0c1a      	lsrs	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f002 0204 	and.w	r2, r2, #4
 8001816:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001826:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_SPI_Transmit+0x22>
 800185e:	2302      	movs	r3, #2
 8001860:	e12d      	b.n	8001abe <HAL_SPI_Transmit+0x27e>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800186a:	f7fe ffef 	bl	800084c <HAL_GetTick>
 800186e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d002      	beq.n	8001886 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001880:	2302      	movs	r3, #2
 8001882:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001884:	e116      	b.n	8001ab4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <HAL_SPI_Transmit+0x52>
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001896:	e10d      	b.n	8001ab4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2203      	movs	r2, #3
 800189c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	88fa      	ldrh	r2, [r7, #6]
 80018b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	88fa      	ldrh	r2, [r7, #6]
 80018b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018de:	d10f      	bne.n	8001900 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190a:	2b40      	cmp	r3, #64	; 0x40
 800190c:	d007      	beq.n	800191e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001926:	d14f      	bne.n	80019c8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <HAL_SPI_Transmit+0xf6>
 8001930:	8afb      	ldrh	r3, [r7, #22]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d142      	bne.n	80019bc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	1c9a      	adds	r2, r3, #2
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800195a:	e02f      	b.n	80019bc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d112      	bne.n	8001990 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	1c9a      	adds	r2, r3, #2
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001984:	b29b      	uxth	r3, r3
 8001986:	3b01      	subs	r3, #1
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	86da      	strh	r2, [r3, #54]	; 0x36
 800198e:	e015      	b.n	80019bc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001990:	f7fe ff5c 	bl	800084c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d803      	bhi.n	80019a8 <HAL_SPI_Transmit+0x168>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a6:	d102      	bne.n	80019ae <HAL_SPI_Transmit+0x16e>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80019ba:	e07b      	b.n	8001ab4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ca      	bne.n	800195c <HAL_SPI_Transmit+0x11c>
 80019c6:	e050      	b.n	8001a6a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_SPI_Transmit+0x196>
 80019d0:	8afb      	ldrh	r3, [r7, #22]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d144      	bne.n	8001a60 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	330c      	adds	r3, #12
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80019fc:	e030      	b.n	8001a60 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d113      	bne.n	8001a34 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	330c      	adds	r3, #12
 8001a16:	7812      	ldrb	r2, [r2, #0]
 8001a18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a32:	e015      	b.n	8001a60 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a34:	f7fe ff0a 	bl	800084c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d803      	bhi.n	8001a4c <HAL_SPI_Transmit+0x20c>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a4a:	d102      	bne.n	8001a52 <HAL_SPI_Transmit+0x212>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001a5e:	e029      	b.n	8001ab4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1c9      	bne.n	80019fe <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	6839      	ldr	r1, [r7, #0]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 fc44 	bl	80022fc <SPI_EndRxTxTransaction>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10a      	bne.n	8001a9e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	77fb      	strb	r3, [r7, #31]
 8001aaa:	e003      	b.n	8001ab4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001abc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d002      	beq.n	8001aec <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001aea:	e07d      	b.n	8001be8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d110      	bne.n	8001b16 <HAL_SPI_Receive_IT+0x4e>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001afc:	d10b      	bne.n	8001b16 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2204      	movs	r2, #4
 8001b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f879 	bl	8001c04 <HAL_SPI_TransmitReceive_IT>
 8001b12:	4603      	mov	r3, r0
 8001b14:	e06d      	b.n	8001bf2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_SPI_Receive_IT+0x5c>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e066      	b.n	8001bf2 <HAL_SPI_Receive_IT+0x12a>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_SPI_Receive_IT+0x70>
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b3c:	e054      	b.n	8001be8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2204      	movs	r2, #4
 8001b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	88fa      	ldrh	r2, [r7, #6]
 8001b56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <HAL_SPI_Receive_IT+0x134>)
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
 8001b84:	e002      	b.n	8001b8c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_SPI_Receive_IT+0x138>)
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b94:	d10f      	bne.n	8001bb6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001bc4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d008      	beq.n	8001be6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e000      	b.n	8001be8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8001be6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	08002101 	.word	0x08002101
 8001c00:	080020b7 	.word	0x080020b7

08001c04 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_SPI_TransmitReceive_IT+0x20>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e075      	b.n	8001d10 <HAL_SPI_TransmitReceive_IT+0x10c>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c32:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c3a:	7dbb      	ldrb	r3, [r7, #22]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d00d      	beq.n	8001c5c <HAL_SPI_TransmitReceive_IT+0x58>
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c46:	d106      	bne.n	8001c56 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <HAL_SPI_TransmitReceive_IT+0x52>
 8001c50:	7dbb      	ldrb	r3, [r7, #22]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d002      	beq.n	8001c5c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
 8001c58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c5a:	e054      	b.n	8001d06 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c72:	e048      	b.n	8001d06 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d003      	beq.n	8001c88 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2205      	movs	r2, #5
 8001c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	887a      	ldrh	r2, [r7, #2]
 8001c9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_SPI_TransmitReceive_IT+0x118>)
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8001cc6:	e005      	b.n	8001cd4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_SPI_TransmitReceive_IT+0x120>)
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_SPI_TransmitReceive_IT+0x124>)
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d008      	beq.n	8001d04 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e000      	b.n	8001d06 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8001d04:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	08001ff9 	.word	0x08001ff9
 8001d20:	08002059 	.word	0x08002059
 8001d24:	08001f35 	.word	0x08001f35
 8001d28:	08001f99 	.word	0x08001f99

08001d2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10e      	bne.n	8001d6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
    return;
 8001d6a:	e0b7      	b.n	8001edc <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_SPI_IRQHandler+0x5e>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
    return;
 8001d88:	e0a8      	b.n	8001edc <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_SPI_IRQHandler+0x74>
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 809e 	beq.w	8001edc <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8098 	beq.w	8001edc <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d023      	beq.n	8001dfe <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d011      	beq.n	8001de6 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	f043 0204 	orr.w	r2, r3, #4
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	e00b      	b.n	8001dfe <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]
        return;
 8001dfc:	e06e      	b.n	8001edc <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d014      	beq.n	8001e32 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d04f      	beq.n	8001eda <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e48:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <HAL_SPI_IRQHandler+0x13a>
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d034      	beq.n	8001ed0 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0203 	bic.w	r2, r2, #3
 8001e74:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d011      	beq.n	8001ea2 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_SPI_IRQHandler+0x1b8>)
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fe30 	bl	8000af0 <HAL_DMA_Abort_IT>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d016      	beq.n	8001ed8 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <HAL_SPI_IRQHandler+0x1b8>)
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fe1a 	bl	8000af0 <HAL_DMA_Abort_IT>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001ece:	e003      	b.n	8001ed8 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f812 	bl	8001efa <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001ed6:	e000      	b.n	8001eda <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8001ed8:	bf00      	nop
    return;
 8001eda:	bf00      	nop
  }
}
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	08001f0d 	.word	0x08001f0d

08001ee8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff ffe7 	bl	8001efa <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f103 020c 	add.w	r2, r3, #12
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	7812      	ldrb	r2, [r2, #0]
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f7e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f9d4 	bl	8002338 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	7812      	ldrb	r2, [r2, #0]
 8001fac:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10f      	bne.n	8001ff0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fde:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f9a4 	bl	8002338 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	b292      	uxth	r2, r2
 800200c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	1c9a      	adds	r2, r3, #2
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10f      	bne.n	8002050 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f974 	bl	8002338 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	881a      	ldrh	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	1c9a      	adds	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800209c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f945 	bl	8002338 <SPI_CloseRxTx_ISR>
    }
  }
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f103 020c 	add.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	7812      	ldrb	r2, [r2, #0]
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f994 	bl	8002420 <SPI_CloseRx_ISR>
  }
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	b292      	uxth	r2, r2
 8002114:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	1c9a      	adds	r2, r3, #2
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f971 	bl	8002420 <SPI_CloseRx_ISR>
  }
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002158:	f7fe fb78 	bl	800084c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	4413      	add	r3, r2
 8002166:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002168:	f7fe fb70 	bl	800084c <HAL_GetTick>
 800216c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	015b      	lsls	r3, r3, #5
 8002174:	0d1b      	lsrs	r3, r3, #20
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800217e:	e054      	b.n	800222a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002186:	d050      	beq.n	800222a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002188:	f7fe fb60 	bl	800084c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	429a      	cmp	r2, r3
 8002196:	d902      	bls.n	800219e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d13d      	bne.n	800221a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021b6:	d111      	bne.n	80021dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c0:	d004      	beq.n	80021cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d107      	bne.n	80021dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e4:	d10f      	bne.n	8002206 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002204:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e017      	b.n	800224a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3b01      	subs	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4013      	ands	r3, r2
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	429a      	cmp	r2, r3
 8002238:	bf0c      	ite	eq
 800223a:	2301      	moveq	r3, #1
 800223c:	2300      	movne	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	429a      	cmp	r2, r3
 8002246:	d19b      	bne.n	8002180 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000000 	.word	0x20000000

08002258 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800226c:	d111      	bne.n	8002292 <SPI_EndRxTransaction+0x3a>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002276:	d004      	beq.n	8002282 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002280:	d107      	bne.n	8002292 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002290:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800229a:	d117      	bne.n	80022cc <SPI_EndRxTransaction+0x74>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a4:	d112      	bne.n	80022cc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2200      	movs	r2, #0
 80022ae:	2101      	movs	r1, #1
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7ff ff49 	bl	8002148 <SPI_WaitFlagStateUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01a      	beq.n	80022f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e013      	b.n	80022f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2200      	movs	r2, #0
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f7ff ff36 	bl	8002148 <SPI_WaitFlagStateUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	f043 0220 	orr.w	r2, r3, #32
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e000      	b.n	80022f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f7ff ff18 	bl	8002148 <SPI_WaitFlagStateUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e000      	b.n	8002330 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002340:	4b35      	ldr	r3, [pc, #212]	; (8002418 <SPI_CloseRxTx_ISR+0xe0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a35      	ldr	r2, [pc, #212]	; (800241c <SPI_CloseRxTx_ISR+0xe4>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0a5b      	lsrs	r3, r3, #9
 800234c:	2264      	movs	r2, #100	; 0x64
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002354:	f7fe fa7a 	bl	800084c <HAL_GetTick>
 8002358:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0220 	bic.w	r2, r2, #32
 8002368:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d106      	bne.n	800237e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800237c:	e009      	b.n	8002392 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3b01      	subs	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0eb      	beq.n	800236a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	2164      	movs	r1, #100	; 0x64
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffb0 	bl	80022fc <SPI_EndRxTxTransaction>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f043 0220 	orr.w	r2, r3, #32
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10a      	bne.n	80023cc <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d115      	bne.n	8002400 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d107      	bne.n	80023f0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7fd ff93 	bl	8000314 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80023ee:	e00e      	b.n	800240e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fd75 	bl	8001ee8 <HAL_SPI_TxRxCpltCallback>
}
 80023fe:	e006      	b.n	800240e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff fd76 	bl	8001efa <HAL_SPI_ErrorCallback>
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000000 	.word	0x20000000
 800241c:	057619f1 	.word	0x057619f1

08002420 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002436:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002438:	f7fe fa08 	bl	800084c <HAL_GetTick>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	2164      	movs	r1, #100	; 0x64
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff08 	bl	8002258 <SPI_EndRxTransaction>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f043 0220 	orr.w	r2, r3, #32
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7fd ff43 	bl	8000314 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800248e:	e002      	b.n	8002496 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fd32 	bl	8001efa <HAL_SPI_ErrorCallback>
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e042      	b.n	8002536 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7fe f8c9 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2224      	movs	r2, #36	; 0x24
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fdc6 	bl	8003074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002506:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002516:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b08a      	sub	sp, #40	; 0x28
 8002542:	af02      	add	r7, sp, #8
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b20      	cmp	r3, #32
 800255c:	d16d      	bne.n	800263a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_UART_Transmit+0x2c>
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e066      	b.n	800263c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2221      	movs	r2, #33	; 0x21
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800257c:	f7fe f966 	bl	800084c <HAL_GetTick>
 8002580:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002596:	d108      	bne.n	80025aa <HAL_UART_Transmit+0x6c>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	e003      	b.n	80025b2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025b2:	e02a      	b.n	800260a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2200      	movs	r2, #0
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fb15 	bl	8002bee <UART_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e036      	b.n	800263c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	3302      	adds	r3, #2
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e007      	b.n	80025fc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1cf      	bne.n	80025b4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2200      	movs	r2, #0
 800261c:	2140      	movs	r1, #64	; 0x40
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fae5 	bl	8002bee <UART_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e006      	b.n	800263c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	d112      	bne.n	8002684 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_UART_Receive_IT+0x26>
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00b      	b.n	8002686 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	461a      	mov	r2, r3
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fb25 	bl	8002cca <UART_Start_Receive_IT>
 8002680:	4603      	mov	r3, r0
 8002682:	e000      	b.n	8002686 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0ba      	sub	sp, #232	; 0xe8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10f      	bne.n	80026f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_UART_IRQHandler+0x66>
 80026e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fc01 	bl	8002ef6 <UART_Receive_IT>
      return;
 80026f4:	e25b      	b.n	8002bae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80de 	beq.w	80028bc <HAL_UART_IRQHandler+0x22c>
 8002700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d106      	bne.n	800271a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800270c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002710:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80d1 	beq.w	80028bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_UART_IRQHandler+0xae>
 8002726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_UART_IRQHandler+0xd2>
 800274a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f043 0202 	orr.w	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_UART_IRQHandler+0xf6>
 800276e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f043 0204 	orr.w	r2, r3, #4
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d011      	beq.n	80027b6 <HAL_UART_IRQHandler+0x126>
 8002792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800279e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f043 0208 	orr.w	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 81f2 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_UART_IRQHandler+0x14e>
 80027cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fb8c 	bl	8002ef6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_UART_IRQHandler+0x17a>
 8002802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d04f      	beq.n	80028aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa96 	bl	8002d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d041      	beq.n	80028a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3314      	adds	r3, #20
 8002824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3314      	adds	r3, #20
 8002846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800284a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800284e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002852:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800285a:	e841 2300 	strex	r3, r2, [r1]
 800285e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1d9      	bne.n	800281e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d013      	beq.n	800289a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	4a7e      	ldr	r2, [pc, #504]	; (8002a70 <HAL_UART_IRQHandler+0x3e0>)
 8002878:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f936 	bl	8000af0 <HAL_DMA_Abort_IT>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002894:	4610      	mov	r0, r2
 8002896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	e00e      	b.n	80028b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f993 	bl	8002bc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	e00a      	b.n	80028b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f98f 	bl	8002bc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a8:	e006      	b.n	80028b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f98b 	bl	8002bc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80028b6:	e175      	b.n	8002ba4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b8:	bf00      	nop
    return;
 80028ba:	e173      	b.n	8002ba4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	f040 814f 	bne.w	8002b64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8148 	beq.w	8002b64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8141 	beq.w	8002b64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80b6 	beq.w	8002a74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002914:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8145 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002926:	429a      	cmp	r2, r3
 8002928:	f080 813e 	bcs.w	8002ba8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002932:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b20      	cmp	r3, #32
 800293c:	f000 8088 	beq.w	8002a50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	330c      	adds	r3, #12
 8002946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800295a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800295e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800296c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002970:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002974:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002978:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1d9      	bne.n	8002940 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3314      	adds	r3, #20
 8002992:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800299c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3314      	adds	r3, #20
 80029ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029bc:	e841 2300 	strex	r3, r2, [r1]
 80029c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e1      	bne.n	800298c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3314      	adds	r3, #20
 80029ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3314      	adds	r3, #20
 80029e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029f4:	e841 2300 	strex	r3, r2, [r1]
 80029f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e3      	bne.n	80029c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a18:	e853 3f00 	ldrex	r3, [r3]
 8002a1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a20:	f023 0310 	bic.w	r3, r3, #16
 8002a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a32:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a3a:	e841 2300 	strex	r3, r2, [r1]
 8002a3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1e3      	bne.n	8002a0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe f815 	bl	8000a7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8b6 	bl	8002bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a6c:	e09c      	b.n	8002ba8 <HAL_UART_IRQHandler+0x518>
 8002a6e:	bf00      	nop
 8002a70:	08002e01 	.word	0x08002e01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 808e 	beq.w	8002bac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8089 	beq.w	8002bac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002abe:	647a      	str	r2, [r7, #68]	; 0x44
 8002ac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ac6:	e841 2300 	strex	r3, r2, [r1]
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e3      	bne.n	8002a9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3314      	adds	r3, #20
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3314      	adds	r3, #20
 8002af2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002af6:	633a      	str	r2, [r7, #48]	; 0x30
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e3      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	e853 3f00 	ldrex	r3, [r3]
 8002b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0310 	bic.w	r3, r3, #16
 8002b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	330c      	adds	r3, #12
 8002b38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b3c:	61fa      	str	r2, [r7, #28]
 8002b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b40:	69b9      	ldr	r1, [r7, #24]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	e841 2300 	strex	r3, r2, [r1]
 8002b48:	617b      	str	r3, [r7, #20]
   return(result);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e3      	bne.n	8002b18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f83b 	bl	8002bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b62:	e023      	b.n	8002bac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HAL_UART_IRQHandler+0x4f4>
 8002b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f953 	bl	8002e28 <UART_Transmit_IT>
    return;
 8002b82:	e014      	b.n	8002bae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <HAL_UART_IRQHandler+0x51e>
 8002b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f992 	bl	8002ec6 <UART_EndTransmit_IT>
    return;
 8002ba2:	e004      	b.n	8002bae <HAL_UART_IRQHandler+0x51e>
    return;
 8002ba4:	bf00      	nop
 8002ba6:	e002      	b.n	8002bae <HAL_UART_IRQHandler+0x51e>
      return;
 8002ba8:	bf00      	nop
 8002baa:	e000      	b.n	8002bae <HAL_UART_IRQHandler+0x51e>
      return;
 8002bac:	bf00      	nop
  }
}
 8002bae:	37e8      	adds	r7, #232	; 0xe8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b090      	sub	sp, #64	; 0x40
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bfe:	e050      	b.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c06:	d04c      	beq.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c0e:	f7fd fe1d 	bl	800084c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d241      	bcs.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c3e:	637a      	str	r2, [r7, #52]	; 0x34
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1e5      	bne.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3314      	adds	r3, #20
 8002c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	e853 3f00 	ldrex	r3, [r3]
 8002c60:	613b      	str	r3, [r7, #16]
   return(result);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3314      	adds	r3, #20
 8002c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c72:	623a      	str	r2, [r7, #32]
 8002c74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c76:	69f9      	ldr	r1, [r7, #28]
 8002c78:	6a3a      	ldr	r2, [r7, #32]
 8002c7a:	e841 2300 	strex	r3, r2, [r1]
 8002c7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e5      	bne.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e00f      	b.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4013      	ands	r3, r2
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2301      	moveq	r3, #1
 8002cb4:	2300      	movne	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d09f      	beq.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3740      	adds	r7, #64	; 0x40
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2222      	movs	r2, #34	; 0x22
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d0e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0220 	orr.w	r2, r2, #32
 8002d2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b095      	sub	sp, #84	; 0x54
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d64:	643a      	str	r2, [r7, #64]	; 0x40
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e5      	bne.n	8002d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3314      	adds	r3, #20
 8002d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3314      	adds	r3, #20
 8002d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d119      	bne.n	8002de8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	e853 3f00 	ldrex	r3, [r3]
 8002dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f023 0310 	bic.w	r3, r3, #16
 8002dca:	647b      	str	r3, [r7, #68]	; 0x44
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dd4:	61ba      	str	r2, [r7, #24]
 8002dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	e841 2300 	strex	r3, r2, [r1]
 8002de0:	613b      	str	r3, [r7, #16]
   return(result);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e5      	bne.n	8002db4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002df6:	bf00      	nop
 8002df8:	3754      	adds	r7, #84	; 0x54
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff fed3 	bl	8002bc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b21      	cmp	r3, #33	; 0x21
 8002e3a:	d13e      	bne.n	8002eba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e44:	d114      	bne.n	8002e70 <UART_Transmit_IT+0x48>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d110      	bne.n	8002e70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	1c9a      	adds	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]
 8002e6e:	e008      	b.n	8002e82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	1c59      	adds	r1, r3, #1
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6211      	str	r1, [r2, #32]
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002edc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff fe64 	bl	8002bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b08c      	sub	sp, #48	; 0x30
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b22      	cmp	r3, #34	; 0x22
 8002f08:	f040 80ae 	bne.w	8003068 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f14:	d117      	bne.n	8002f46 <UART_Receive_IT+0x50>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d113      	bne.n	8002f46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	1c9a      	adds	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
 8002f44:	e026      	b.n	8002f94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f58:	d007      	beq.n	8002f6a <UART_Receive_IT+0x74>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <UART_Receive_IT+0x82>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	e008      	b.n	8002f8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d15d      	bne.n	8003064 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0220 	bic.w	r2, r2, #32
 8002fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d135      	bne.n	800305a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	e853 3f00 	ldrex	r3, [r3]
 8003002:	613b      	str	r3, [r7, #16]
   return(result);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f023 0310 	bic.w	r3, r3, #16
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	623a      	str	r2, [r7, #32]
 8003016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003018:	69f9      	ldr	r1, [r7, #28]
 800301a:	6a3a      	ldr	r2, [r7, #32]
 800301c:	e841 2300 	strex	r3, r2, [r1]
 8003020:	61bb      	str	r3, [r7, #24]
   return(result);
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e5      	bne.n	8002ff4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b10      	cmp	r3, #16
 8003034:	d10a      	bne.n	800304c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fdc0 	bl	8002bd8 <HAL_UARTEx_RxEventCallback>
 8003058:	e002      	b.n	8003060 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd f92e 	bl	80002bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e002      	b.n	800306a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003068:	2302      	movs	r3, #2
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	3730      	adds	r7, #48	; 0x30
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030ae:	f023 030c 	bic.w	r3, r3, #12
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2c      	ldr	r2, [pc, #176]	; (8003188 <UART_SetConfig+0x114>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d103      	bne.n	80030e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030dc:	f7fe fafa 	bl	80016d4 <HAL_RCC_GetPCLK2Freq>
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	e002      	b.n	80030ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030e4:	f7fe fae2 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 80030e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	4a22      	ldr	r2, [pc, #136]	; (800318c <UART_SetConfig+0x118>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	0119      	lsls	r1, r3, #4
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	009a      	lsls	r2, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <UART_SetConfig+0x118>)
 8003122:	fba3 0302 	umull	r0, r3, r3, r2
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2064      	movs	r0, #100	; 0x64
 800312a:	fb00 f303 	mul.w	r3, r0, r3
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	3332      	adds	r3, #50	; 0x32
 8003134:	4a15      	ldr	r2, [pc, #84]	; (800318c <UART_SetConfig+0x118>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003140:	4419      	add	r1, r3
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009a      	lsls	r2, r3, #2
 800314c:	441a      	add	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	fbb2 f2f3 	udiv	r2, r2, r3
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <UART_SetConfig+0x118>)
 800315a:	fba3 0302 	umull	r0, r3, r3, r2
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	2064      	movs	r0, #100	; 0x64
 8003162:	fb00 f303 	mul.w	r3, r0, r3
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	3332      	adds	r3, #50	; 0x32
 800316c:	4a07      	ldr	r2, [pc, #28]	; (800318c <UART_SetConfig+0x118>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	f003 020f 	and.w	r2, r3, #15
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	440a      	add	r2, r1
 800317e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40013800 	.word	0x40013800
 800318c:	51eb851f 	.word	0x51eb851f

08003190 <_vsiprintf_r>:
 8003190:	b500      	push	{lr}
 8003192:	b09b      	sub	sp, #108	; 0x6c
 8003194:	9100      	str	r1, [sp, #0]
 8003196:	9104      	str	r1, [sp, #16]
 8003198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800319c:	9105      	str	r1, [sp, #20]
 800319e:	9102      	str	r1, [sp, #8]
 80031a0:	4905      	ldr	r1, [pc, #20]	; (80031b8 <_vsiprintf_r+0x28>)
 80031a2:	9103      	str	r1, [sp, #12]
 80031a4:	4669      	mov	r1, sp
 80031a6:	f000 f995 	bl	80034d4 <_svfiprintf_r>
 80031aa:	2200      	movs	r2, #0
 80031ac:	9b00      	ldr	r3, [sp, #0]
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	b01b      	add	sp, #108	; 0x6c
 80031b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80031b6:	bf00      	nop
 80031b8:	ffff0208 	.word	0xffff0208

080031bc <vsiprintf>:
 80031bc:	4613      	mov	r3, r2
 80031be:	460a      	mov	r2, r1
 80031c0:	4601      	mov	r1, r0
 80031c2:	4802      	ldr	r0, [pc, #8]	; (80031cc <vsiprintf+0x10>)
 80031c4:	6800      	ldr	r0, [r0, #0]
 80031c6:	f7ff bfe3 	b.w	8003190 <_vsiprintf_r>
 80031ca:	bf00      	nop
 80031cc:	20000058 	.word	0x20000058

080031d0 <memset>:
 80031d0:	4603      	mov	r3, r0
 80031d2:	4402      	add	r2, r0
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d100      	bne.n	80031da <memset+0xa>
 80031d8:	4770      	bx	lr
 80031da:	f803 1b01 	strb.w	r1, [r3], #1
 80031de:	e7f9      	b.n	80031d4 <memset+0x4>

080031e0 <__errno>:
 80031e0:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <__errno+0x8>)
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000058 	.word	0x20000058

080031ec <__libc_init_array>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	2600      	movs	r6, #0
 80031f0:	4d0c      	ldr	r5, [pc, #48]	; (8003224 <__libc_init_array+0x38>)
 80031f2:	4c0d      	ldr	r4, [pc, #52]	; (8003228 <__libc_init_array+0x3c>)
 80031f4:	1b64      	subs	r4, r4, r5
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	42a6      	cmp	r6, r4
 80031fa:	d109      	bne.n	8003210 <__libc_init_array+0x24>
 80031fc:	f000 fc7a 	bl	8003af4 <_init>
 8003200:	2600      	movs	r6, #0
 8003202:	4d0a      	ldr	r5, [pc, #40]	; (800322c <__libc_init_array+0x40>)
 8003204:	4c0a      	ldr	r4, [pc, #40]	; (8003230 <__libc_init_array+0x44>)
 8003206:	1b64      	subs	r4, r4, r5
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	42a6      	cmp	r6, r4
 800320c:	d105      	bne.n	800321a <__libc_init_array+0x2e>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	f855 3b04 	ldr.w	r3, [r5], #4
 8003214:	4798      	blx	r3
 8003216:	3601      	adds	r6, #1
 8003218:	e7ee      	b.n	80031f8 <__libc_init_array+0xc>
 800321a:	f855 3b04 	ldr.w	r3, [r5], #4
 800321e:	4798      	blx	r3
 8003220:	3601      	adds	r6, #1
 8003222:	e7f2      	b.n	800320a <__libc_init_array+0x1e>
 8003224:	08003b7c 	.word	0x08003b7c
 8003228:	08003b7c 	.word	0x08003b7c
 800322c:	08003b7c 	.word	0x08003b7c
 8003230:	08003b80 	.word	0x08003b80

08003234 <__retarget_lock_acquire_recursive>:
 8003234:	4770      	bx	lr

08003236 <__retarget_lock_release_recursive>:
 8003236:	4770      	bx	lr

08003238 <_free_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	4605      	mov	r5, r0
 800323c:	2900      	cmp	r1, #0
 800323e:	d040      	beq.n	80032c2 <_free_r+0x8a>
 8003240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003244:	1f0c      	subs	r4, r1, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	bfb8      	it	lt
 800324a:	18e4      	addlt	r4, r4, r3
 800324c:	f000 f8dc 	bl	8003408 <__malloc_lock>
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <_free_r+0x8c>)
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	b933      	cbnz	r3, 8003264 <_free_r+0x2c>
 8003256:	6063      	str	r3, [r4, #4]
 8003258:	6014      	str	r4, [r2, #0]
 800325a:	4628      	mov	r0, r5
 800325c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003260:	f000 b8d8 	b.w	8003414 <__malloc_unlock>
 8003264:	42a3      	cmp	r3, r4
 8003266:	d908      	bls.n	800327a <_free_r+0x42>
 8003268:	6820      	ldr	r0, [r4, #0]
 800326a:	1821      	adds	r1, r4, r0
 800326c:	428b      	cmp	r3, r1
 800326e:	bf01      	itttt	eq
 8003270:	6819      	ldreq	r1, [r3, #0]
 8003272:	685b      	ldreq	r3, [r3, #4]
 8003274:	1809      	addeq	r1, r1, r0
 8003276:	6021      	streq	r1, [r4, #0]
 8003278:	e7ed      	b.n	8003256 <_free_r+0x1e>
 800327a:	461a      	mov	r2, r3
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b10b      	cbz	r3, 8003284 <_free_r+0x4c>
 8003280:	42a3      	cmp	r3, r4
 8003282:	d9fa      	bls.n	800327a <_free_r+0x42>
 8003284:	6811      	ldr	r1, [r2, #0]
 8003286:	1850      	adds	r0, r2, r1
 8003288:	42a0      	cmp	r0, r4
 800328a:	d10b      	bne.n	80032a4 <_free_r+0x6c>
 800328c:	6820      	ldr	r0, [r4, #0]
 800328e:	4401      	add	r1, r0
 8003290:	1850      	adds	r0, r2, r1
 8003292:	4283      	cmp	r3, r0
 8003294:	6011      	str	r1, [r2, #0]
 8003296:	d1e0      	bne.n	800325a <_free_r+0x22>
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4408      	add	r0, r1
 800329e:	6010      	str	r0, [r2, #0]
 80032a0:	6053      	str	r3, [r2, #4]
 80032a2:	e7da      	b.n	800325a <_free_r+0x22>
 80032a4:	d902      	bls.n	80032ac <_free_r+0x74>
 80032a6:	230c      	movs	r3, #12
 80032a8:	602b      	str	r3, [r5, #0]
 80032aa:	e7d6      	b.n	800325a <_free_r+0x22>
 80032ac:	6820      	ldr	r0, [r4, #0]
 80032ae:	1821      	adds	r1, r4, r0
 80032b0:	428b      	cmp	r3, r1
 80032b2:	bf01      	itttt	eq
 80032b4:	6819      	ldreq	r1, [r3, #0]
 80032b6:	685b      	ldreq	r3, [r3, #4]
 80032b8:	1809      	addeq	r1, r1, r0
 80032ba:	6021      	streq	r1, [r4, #0]
 80032bc:	6063      	str	r3, [r4, #4]
 80032be:	6054      	str	r4, [r2, #4]
 80032c0:	e7cb      	b.n	800325a <_free_r+0x22>
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	2000026c 	.word	0x2000026c

080032c8 <sbrk_aligned>:
 80032c8:	b570      	push	{r4, r5, r6, lr}
 80032ca:	4e0e      	ldr	r6, [pc, #56]	; (8003304 <sbrk_aligned+0x3c>)
 80032cc:	460c      	mov	r4, r1
 80032ce:	6831      	ldr	r1, [r6, #0]
 80032d0:	4605      	mov	r5, r0
 80032d2:	b911      	cbnz	r1, 80032da <sbrk_aligned+0x12>
 80032d4:	f000 fbaa 	bl	8003a2c <_sbrk_r>
 80032d8:	6030      	str	r0, [r6, #0]
 80032da:	4621      	mov	r1, r4
 80032dc:	4628      	mov	r0, r5
 80032de:	f000 fba5 	bl	8003a2c <_sbrk_r>
 80032e2:	1c43      	adds	r3, r0, #1
 80032e4:	d00a      	beq.n	80032fc <sbrk_aligned+0x34>
 80032e6:	1cc4      	adds	r4, r0, #3
 80032e8:	f024 0403 	bic.w	r4, r4, #3
 80032ec:	42a0      	cmp	r0, r4
 80032ee:	d007      	beq.n	8003300 <sbrk_aligned+0x38>
 80032f0:	1a21      	subs	r1, r4, r0
 80032f2:	4628      	mov	r0, r5
 80032f4:	f000 fb9a 	bl	8003a2c <_sbrk_r>
 80032f8:	3001      	adds	r0, #1
 80032fa:	d101      	bne.n	8003300 <sbrk_aligned+0x38>
 80032fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003300:	4620      	mov	r0, r4
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	20000270 	.word	0x20000270

08003308 <_malloc_r>:
 8003308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800330c:	1ccd      	adds	r5, r1, #3
 800330e:	f025 0503 	bic.w	r5, r5, #3
 8003312:	3508      	adds	r5, #8
 8003314:	2d0c      	cmp	r5, #12
 8003316:	bf38      	it	cc
 8003318:	250c      	movcc	r5, #12
 800331a:	2d00      	cmp	r5, #0
 800331c:	4607      	mov	r7, r0
 800331e:	db01      	blt.n	8003324 <_malloc_r+0x1c>
 8003320:	42a9      	cmp	r1, r5
 8003322:	d905      	bls.n	8003330 <_malloc_r+0x28>
 8003324:	230c      	movs	r3, #12
 8003326:	2600      	movs	r6, #0
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4630      	mov	r0, r6
 800332c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003330:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003404 <_malloc_r+0xfc>
 8003334:	f000 f868 	bl	8003408 <__malloc_lock>
 8003338:	f8d8 3000 	ldr.w	r3, [r8]
 800333c:	461c      	mov	r4, r3
 800333e:	bb5c      	cbnz	r4, 8003398 <_malloc_r+0x90>
 8003340:	4629      	mov	r1, r5
 8003342:	4638      	mov	r0, r7
 8003344:	f7ff ffc0 	bl	80032c8 <sbrk_aligned>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	4604      	mov	r4, r0
 800334c:	d155      	bne.n	80033fa <_malloc_r+0xf2>
 800334e:	f8d8 4000 	ldr.w	r4, [r8]
 8003352:	4626      	mov	r6, r4
 8003354:	2e00      	cmp	r6, #0
 8003356:	d145      	bne.n	80033e4 <_malloc_r+0xdc>
 8003358:	2c00      	cmp	r4, #0
 800335a:	d048      	beq.n	80033ee <_malloc_r+0xe6>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	4631      	mov	r1, r6
 8003360:	4638      	mov	r0, r7
 8003362:	eb04 0903 	add.w	r9, r4, r3
 8003366:	f000 fb61 	bl	8003a2c <_sbrk_r>
 800336a:	4581      	cmp	r9, r0
 800336c:	d13f      	bne.n	80033ee <_malloc_r+0xe6>
 800336e:	6821      	ldr	r1, [r4, #0]
 8003370:	4638      	mov	r0, r7
 8003372:	1a6d      	subs	r5, r5, r1
 8003374:	4629      	mov	r1, r5
 8003376:	f7ff ffa7 	bl	80032c8 <sbrk_aligned>
 800337a:	3001      	adds	r0, #1
 800337c:	d037      	beq.n	80033ee <_malloc_r+0xe6>
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	442b      	add	r3, r5
 8003382:	6023      	str	r3, [r4, #0]
 8003384:	f8d8 3000 	ldr.w	r3, [r8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d038      	beq.n	80033fe <_malloc_r+0xf6>
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	42a2      	cmp	r2, r4
 8003390:	d12b      	bne.n	80033ea <_malloc_r+0xe2>
 8003392:	2200      	movs	r2, #0
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	e00f      	b.n	80033b8 <_malloc_r+0xb0>
 8003398:	6822      	ldr	r2, [r4, #0]
 800339a:	1b52      	subs	r2, r2, r5
 800339c:	d41f      	bmi.n	80033de <_malloc_r+0xd6>
 800339e:	2a0b      	cmp	r2, #11
 80033a0:	d917      	bls.n	80033d2 <_malloc_r+0xca>
 80033a2:	1961      	adds	r1, r4, r5
 80033a4:	42a3      	cmp	r3, r4
 80033a6:	6025      	str	r5, [r4, #0]
 80033a8:	bf18      	it	ne
 80033aa:	6059      	strne	r1, [r3, #4]
 80033ac:	6863      	ldr	r3, [r4, #4]
 80033ae:	bf08      	it	eq
 80033b0:	f8c8 1000 	streq.w	r1, [r8]
 80033b4:	5162      	str	r2, [r4, r5]
 80033b6:	604b      	str	r3, [r1, #4]
 80033b8:	4638      	mov	r0, r7
 80033ba:	f104 060b 	add.w	r6, r4, #11
 80033be:	f000 f829 	bl	8003414 <__malloc_unlock>
 80033c2:	f026 0607 	bic.w	r6, r6, #7
 80033c6:	1d23      	adds	r3, r4, #4
 80033c8:	1af2      	subs	r2, r6, r3
 80033ca:	d0ae      	beq.n	800332a <_malloc_r+0x22>
 80033cc:	1b9b      	subs	r3, r3, r6
 80033ce:	50a3      	str	r3, [r4, r2]
 80033d0:	e7ab      	b.n	800332a <_malloc_r+0x22>
 80033d2:	42a3      	cmp	r3, r4
 80033d4:	6862      	ldr	r2, [r4, #4]
 80033d6:	d1dd      	bne.n	8003394 <_malloc_r+0x8c>
 80033d8:	f8c8 2000 	str.w	r2, [r8]
 80033dc:	e7ec      	b.n	80033b8 <_malloc_r+0xb0>
 80033de:	4623      	mov	r3, r4
 80033e0:	6864      	ldr	r4, [r4, #4]
 80033e2:	e7ac      	b.n	800333e <_malloc_r+0x36>
 80033e4:	4634      	mov	r4, r6
 80033e6:	6876      	ldr	r6, [r6, #4]
 80033e8:	e7b4      	b.n	8003354 <_malloc_r+0x4c>
 80033ea:	4613      	mov	r3, r2
 80033ec:	e7cc      	b.n	8003388 <_malloc_r+0x80>
 80033ee:	230c      	movs	r3, #12
 80033f0:	4638      	mov	r0, r7
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	f000 f80e 	bl	8003414 <__malloc_unlock>
 80033f8:	e797      	b.n	800332a <_malloc_r+0x22>
 80033fa:	6025      	str	r5, [r4, #0]
 80033fc:	e7dc      	b.n	80033b8 <_malloc_r+0xb0>
 80033fe:	605b      	str	r3, [r3, #4]
 8003400:	deff      	udf	#255	; 0xff
 8003402:	bf00      	nop
 8003404:	2000026c 	.word	0x2000026c

08003408 <__malloc_lock>:
 8003408:	4801      	ldr	r0, [pc, #4]	; (8003410 <__malloc_lock+0x8>)
 800340a:	f7ff bf13 	b.w	8003234 <__retarget_lock_acquire_recursive>
 800340e:	bf00      	nop
 8003410:	20000268 	.word	0x20000268

08003414 <__malloc_unlock>:
 8003414:	4801      	ldr	r0, [pc, #4]	; (800341c <__malloc_unlock+0x8>)
 8003416:	f7ff bf0e 	b.w	8003236 <__retarget_lock_release_recursive>
 800341a:	bf00      	nop
 800341c:	20000268 	.word	0x20000268

08003420 <__ssputs_r>:
 8003420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003424:	461f      	mov	r7, r3
 8003426:	688e      	ldr	r6, [r1, #8]
 8003428:	4682      	mov	sl, r0
 800342a:	42be      	cmp	r6, r7
 800342c:	460c      	mov	r4, r1
 800342e:	4690      	mov	r8, r2
 8003430:	680b      	ldr	r3, [r1, #0]
 8003432:	d82c      	bhi.n	800348e <__ssputs_r+0x6e>
 8003434:	898a      	ldrh	r2, [r1, #12]
 8003436:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800343a:	d026      	beq.n	800348a <__ssputs_r+0x6a>
 800343c:	6965      	ldr	r5, [r4, #20]
 800343e:	6909      	ldr	r1, [r1, #16]
 8003440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003444:	eba3 0901 	sub.w	r9, r3, r1
 8003448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800344c:	1c7b      	adds	r3, r7, #1
 800344e:	444b      	add	r3, r9
 8003450:	106d      	asrs	r5, r5, #1
 8003452:	429d      	cmp	r5, r3
 8003454:	bf38      	it	cc
 8003456:	461d      	movcc	r5, r3
 8003458:	0553      	lsls	r3, r2, #21
 800345a:	d527      	bpl.n	80034ac <__ssputs_r+0x8c>
 800345c:	4629      	mov	r1, r5
 800345e:	f7ff ff53 	bl	8003308 <_malloc_r>
 8003462:	4606      	mov	r6, r0
 8003464:	b360      	cbz	r0, 80034c0 <__ssputs_r+0xa0>
 8003466:	464a      	mov	r2, r9
 8003468:	6921      	ldr	r1, [r4, #16]
 800346a:	f000 fafd 	bl	8003a68 <memcpy>
 800346e:	89a3      	ldrh	r3, [r4, #12]
 8003470:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003478:	81a3      	strh	r3, [r4, #12]
 800347a:	6126      	str	r6, [r4, #16]
 800347c:	444e      	add	r6, r9
 800347e:	6026      	str	r6, [r4, #0]
 8003480:	463e      	mov	r6, r7
 8003482:	6165      	str	r5, [r4, #20]
 8003484:	eba5 0509 	sub.w	r5, r5, r9
 8003488:	60a5      	str	r5, [r4, #8]
 800348a:	42be      	cmp	r6, r7
 800348c:	d900      	bls.n	8003490 <__ssputs_r+0x70>
 800348e:	463e      	mov	r6, r7
 8003490:	4632      	mov	r2, r6
 8003492:	4641      	mov	r1, r8
 8003494:	6820      	ldr	r0, [r4, #0]
 8003496:	f000 faaf 	bl	80039f8 <memmove>
 800349a:	2000      	movs	r0, #0
 800349c:	68a3      	ldr	r3, [r4, #8]
 800349e:	1b9b      	subs	r3, r3, r6
 80034a0:	60a3      	str	r3, [r4, #8]
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	4433      	add	r3, r6
 80034a6:	6023      	str	r3, [r4, #0]
 80034a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ac:	462a      	mov	r2, r5
 80034ae:	f000 fae9 	bl	8003a84 <_realloc_r>
 80034b2:	4606      	mov	r6, r0
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d1e0      	bne.n	800347a <__ssputs_r+0x5a>
 80034b8:	4650      	mov	r0, sl
 80034ba:	6921      	ldr	r1, [r4, #16]
 80034bc:	f7ff febc 	bl	8003238 <_free_r>
 80034c0:	230c      	movs	r3, #12
 80034c2:	f8ca 3000 	str.w	r3, [sl]
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d0:	81a3      	strh	r3, [r4, #12]
 80034d2:	e7e9      	b.n	80034a8 <__ssputs_r+0x88>

080034d4 <_svfiprintf_r>:
 80034d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d8:	4698      	mov	r8, r3
 80034da:	898b      	ldrh	r3, [r1, #12]
 80034dc:	4607      	mov	r7, r0
 80034de:	061b      	lsls	r3, r3, #24
 80034e0:	460d      	mov	r5, r1
 80034e2:	4614      	mov	r4, r2
 80034e4:	b09d      	sub	sp, #116	; 0x74
 80034e6:	d50e      	bpl.n	8003506 <_svfiprintf_r+0x32>
 80034e8:	690b      	ldr	r3, [r1, #16]
 80034ea:	b963      	cbnz	r3, 8003506 <_svfiprintf_r+0x32>
 80034ec:	2140      	movs	r1, #64	; 0x40
 80034ee:	f7ff ff0b 	bl	8003308 <_malloc_r>
 80034f2:	6028      	str	r0, [r5, #0]
 80034f4:	6128      	str	r0, [r5, #16]
 80034f6:	b920      	cbnz	r0, 8003502 <_svfiprintf_r+0x2e>
 80034f8:	230c      	movs	r3, #12
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003500:	e0d0      	b.n	80036a4 <_svfiprintf_r+0x1d0>
 8003502:	2340      	movs	r3, #64	; 0x40
 8003504:	616b      	str	r3, [r5, #20]
 8003506:	2300      	movs	r3, #0
 8003508:	9309      	str	r3, [sp, #36]	; 0x24
 800350a:	2320      	movs	r3, #32
 800350c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003510:	2330      	movs	r3, #48	; 0x30
 8003512:	f04f 0901 	mov.w	r9, #1
 8003516:	f8cd 800c 	str.w	r8, [sp, #12]
 800351a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80036bc <_svfiprintf_r+0x1e8>
 800351e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003522:	4623      	mov	r3, r4
 8003524:	469a      	mov	sl, r3
 8003526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800352a:	b10a      	cbz	r2, 8003530 <_svfiprintf_r+0x5c>
 800352c:	2a25      	cmp	r2, #37	; 0x25
 800352e:	d1f9      	bne.n	8003524 <_svfiprintf_r+0x50>
 8003530:	ebba 0b04 	subs.w	fp, sl, r4
 8003534:	d00b      	beq.n	800354e <_svfiprintf_r+0x7a>
 8003536:	465b      	mov	r3, fp
 8003538:	4622      	mov	r2, r4
 800353a:	4629      	mov	r1, r5
 800353c:	4638      	mov	r0, r7
 800353e:	f7ff ff6f 	bl	8003420 <__ssputs_r>
 8003542:	3001      	adds	r0, #1
 8003544:	f000 80a9 	beq.w	800369a <_svfiprintf_r+0x1c6>
 8003548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800354a:	445a      	add	r2, fp
 800354c:	9209      	str	r2, [sp, #36]	; 0x24
 800354e:	f89a 3000 	ldrb.w	r3, [sl]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80a1 	beq.w	800369a <_svfiprintf_r+0x1c6>
 8003558:	2300      	movs	r3, #0
 800355a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800355e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003562:	f10a 0a01 	add.w	sl, sl, #1
 8003566:	9304      	str	r3, [sp, #16]
 8003568:	9307      	str	r3, [sp, #28]
 800356a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800356e:	931a      	str	r3, [sp, #104]	; 0x68
 8003570:	4654      	mov	r4, sl
 8003572:	2205      	movs	r2, #5
 8003574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003578:	4850      	ldr	r0, [pc, #320]	; (80036bc <_svfiprintf_r+0x1e8>)
 800357a:	f000 fa67 	bl	8003a4c <memchr>
 800357e:	9a04      	ldr	r2, [sp, #16]
 8003580:	b9d8      	cbnz	r0, 80035ba <_svfiprintf_r+0xe6>
 8003582:	06d0      	lsls	r0, r2, #27
 8003584:	bf44      	itt	mi
 8003586:	2320      	movmi	r3, #32
 8003588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800358c:	0711      	lsls	r1, r2, #28
 800358e:	bf44      	itt	mi
 8003590:	232b      	movmi	r3, #43	; 0x2b
 8003592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003596:	f89a 3000 	ldrb.w	r3, [sl]
 800359a:	2b2a      	cmp	r3, #42	; 0x2a
 800359c:	d015      	beq.n	80035ca <_svfiprintf_r+0xf6>
 800359e:	4654      	mov	r4, sl
 80035a0:	2000      	movs	r0, #0
 80035a2:	f04f 0c0a 	mov.w	ip, #10
 80035a6:	9a07      	ldr	r2, [sp, #28]
 80035a8:	4621      	mov	r1, r4
 80035aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035ae:	3b30      	subs	r3, #48	; 0x30
 80035b0:	2b09      	cmp	r3, #9
 80035b2:	d94d      	bls.n	8003650 <_svfiprintf_r+0x17c>
 80035b4:	b1b0      	cbz	r0, 80035e4 <_svfiprintf_r+0x110>
 80035b6:	9207      	str	r2, [sp, #28]
 80035b8:	e014      	b.n	80035e4 <_svfiprintf_r+0x110>
 80035ba:	eba0 0308 	sub.w	r3, r0, r8
 80035be:	fa09 f303 	lsl.w	r3, r9, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	46a2      	mov	sl, r4
 80035c6:	9304      	str	r3, [sp, #16]
 80035c8:	e7d2      	b.n	8003570 <_svfiprintf_r+0x9c>
 80035ca:	9b03      	ldr	r3, [sp, #12]
 80035cc:	1d19      	adds	r1, r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	9103      	str	r1, [sp, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bfbb      	ittet	lt
 80035d6:	425b      	neglt	r3, r3
 80035d8:	f042 0202 	orrlt.w	r2, r2, #2
 80035dc:	9307      	strge	r3, [sp, #28]
 80035de:	9307      	strlt	r3, [sp, #28]
 80035e0:	bfb8      	it	lt
 80035e2:	9204      	strlt	r2, [sp, #16]
 80035e4:	7823      	ldrb	r3, [r4, #0]
 80035e6:	2b2e      	cmp	r3, #46	; 0x2e
 80035e8:	d10c      	bne.n	8003604 <_svfiprintf_r+0x130>
 80035ea:	7863      	ldrb	r3, [r4, #1]
 80035ec:	2b2a      	cmp	r3, #42	; 0x2a
 80035ee:	d134      	bne.n	800365a <_svfiprintf_r+0x186>
 80035f0:	9b03      	ldr	r3, [sp, #12]
 80035f2:	3402      	adds	r4, #2
 80035f4:	1d1a      	adds	r2, r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	9203      	str	r2, [sp, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bfb8      	it	lt
 80035fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003602:	9305      	str	r3, [sp, #20]
 8003604:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80036c0 <_svfiprintf_r+0x1ec>
 8003608:	2203      	movs	r2, #3
 800360a:	4650      	mov	r0, sl
 800360c:	7821      	ldrb	r1, [r4, #0]
 800360e:	f000 fa1d 	bl	8003a4c <memchr>
 8003612:	b138      	cbz	r0, 8003624 <_svfiprintf_r+0x150>
 8003614:	2240      	movs	r2, #64	; 0x40
 8003616:	9b04      	ldr	r3, [sp, #16]
 8003618:	eba0 000a 	sub.w	r0, r0, sl
 800361c:	4082      	lsls	r2, r0
 800361e:	4313      	orrs	r3, r2
 8003620:	3401      	adds	r4, #1
 8003622:	9304      	str	r3, [sp, #16]
 8003624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003628:	2206      	movs	r2, #6
 800362a:	4826      	ldr	r0, [pc, #152]	; (80036c4 <_svfiprintf_r+0x1f0>)
 800362c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003630:	f000 fa0c 	bl	8003a4c <memchr>
 8003634:	2800      	cmp	r0, #0
 8003636:	d038      	beq.n	80036aa <_svfiprintf_r+0x1d6>
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <_svfiprintf_r+0x1f4>)
 800363a:	bb1b      	cbnz	r3, 8003684 <_svfiprintf_r+0x1b0>
 800363c:	9b03      	ldr	r3, [sp, #12]
 800363e:	3307      	adds	r3, #7
 8003640:	f023 0307 	bic.w	r3, r3, #7
 8003644:	3308      	adds	r3, #8
 8003646:	9303      	str	r3, [sp, #12]
 8003648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800364a:	4433      	add	r3, r6
 800364c:	9309      	str	r3, [sp, #36]	; 0x24
 800364e:	e768      	b.n	8003522 <_svfiprintf_r+0x4e>
 8003650:	460c      	mov	r4, r1
 8003652:	2001      	movs	r0, #1
 8003654:	fb0c 3202 	mla	r2, ip, r2, r3
 8003658:	e7a6      	b.n	80035a8 <_svfiprintf_r+0xd4>
 800365a:	2300      	movs	r3, #0
 800365c:	f04f 0c0a 	mov.w	ip, #10
 8003660:	4619      	mov	r1, r3
 8003662:	3401      	adds	r4, #1
 8003664:	9305      	str	r3, [sp, #20]
 8003666:	4620      	mov	r0, r4
 8003668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800366c:	3a30      	subs	r2, #48	; 0x30
 800366e:	2a09      	cmp	r2, #9
 8003670:	d903      	bls.n	800367a <_svfiprintf_r+0x1a6>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0c6      	beq.n	8003604 <_svfiprintf_r+0x130>
 8003676:	9105      	str	r1, [sp, #20]
 8003678:	e7c4      	b.n	8003604 <_svfiprintf_r+0x130>
 800367a:	4604      	mov	r4, r0
 800367c:	2301      	movs	r3, #1
 800367e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003682:	e7f0      	b.n	8003666 <_svfiprintf_r+0x192>
 8003684:	ab03      	add	r3, sp, #12
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	462a      	mov	r2, r5
 800368a:	4638      	mov	r0, r7
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <_svfiprintf_r+0x1f8>)
 800368e:	a904      	add	r1, sp, #16
 8003690:	f3af 8000 	nop.w
 8003694:	1c42      	adds	r2, r0, #1
 8003696:	4606      	mov	r6, r0
 8003698:	d1d6      	bne.n	8003648 <_svfiprintf_r+0x174>
 800369a:	89ab      	ldrh	r3, [r5, #12]
 800369c:	065b      	lsls	r3, r3, #25
 800369e:	f53f af2d 	bmi.w	80034fc <_svfiprintf_r+0x28>
 80036a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036a4:	b01d      	add	sp, #116	; 0x74
 80036a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036aa:	ab03      	add	r3, sp, #12
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	462a      	mov	r2, r5
 80036b0:	4638      	mov	r0, r7
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <_svfiprintf_r+0x1f8>)
 80036b4:	a904      	add	r1, sp, #16
 80036b6:	f000 f87d 	bl	80037b4 <_printf_i>
 80036ba:	e7eb      	b.n	8003694 <_svfiprintf_r+0x1c0>
 80036bc:	08003b46 	.word	0x08003b46
 80036c0:	08003b4c 	.word	0x08003b4c
 80036c4:	08003b50 	.word	0x08003b50
 80036c8:	00000000 	.word	0x00000000
 80036cc:	08003421 	.word	0x08003421

080036d0 <_printf_common>:
 80036d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	4616      	mov	r6, r2
 80036d6:	4699      	mov	r9, r3
 80036d8:	688a      	ldr	r2, [r1, #8]
 80036da:	690b      	ldr	r3, [r1, #16]
 80036dc:	4607      	mov	r7, r0
 80036de:	4293      	cmp	r3, r2
 80036e0:	bfb8      	it	lt
 80036e2:	4613      	movlt	r3, r2
 80036e4:	6033      	str	r3, [r6, #0]
 80036e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ea:	460c      	mov	r4, r1
 80036ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036f0:	b10a      	cbz	r2, 80036f6 <_printf_common+0x26>
 80036f2:	3301      	adds	r3, #1
 80036f4:	6033      	str	r3, [r6, #0]
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	0699      	lsls	r1, r3, #26
 80036fa:	bf42      	ittt	mi
 80036fc:	6833      	ldrmi	r3, [r6, #0]
 80036fe:	3302      	addmi	r3, #2
 8003700:	6033      	strmi	r3, [r6, #0]
 8003702:	6825      	ldr	r5, [r4, #0]
 8003704:	f015 0506 	ands.w	r5, r5, #6
 8003708:	d106      	bne.n	8003718 <_printf_common+0x48>
 800370a:	f104 0a19 	add.w	sl, r4, #25
 800370e:	68e3      	ldr	r3, [r4, #12]
 8003710:	6832      	ldr	r2, [r6, #0]
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	42ab      	cmp	r3, r5
 8003716:	dc2b      	bgt.n	8003770 <_printf_common+0xa0>
 8003718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800371c:	1e13      	subs	r3, r2, #0
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	bf18      	it	ne
 8003722:	2301      	movne	r3, #1
 8003724:	0692      	lsls	r2, r2, #26
 8003726:	d430      	bmi.n	800378a <_printf_common+0xba>
 8003728:	4649      	mov	r1, r9
 800372a:	4638      	mov	r0, r7
 800372c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003730:	47c0      	blx	r8
 8003732:	3001      	adds	r0, #1
 8003734:	d023      	beq.n	800377e <_printf_common+0xae>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	6922      	ldr	r2, [r4, #16]
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf14      	ite	ne
 8003742:	2500      	movne	r5, #0
 8003744:	6833      	ldreq	r3, [r6, #0]
 8003746:	f04f 0600 	mov.w	r6, #0
 800374a:	bf08      	it	eq
 800374c:	68e5      	ldreq	r5, [r4, #12]
 800374e:	f104 041a 	add.w	r4, r4, #26
 8003752:	bf08      	it	eq
 8003754:	1aed      	subeq	r5, r5, r3
 8003756:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800375a:	bf08      	it	eq
 800375c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003760:	4293      	cmp	r3, r2
 8003762:	bfc4      	itt	gt
 8003764:	1a9b      	subgt	r3, r3, r2
 8003766:	18ed      	addgt	r5, r5, r3
 8003768:	42b5      	cmp	r5, r6
 800376a:	d11a      	bne.n	80037a2 <_printf_common+0xd2>
 800376c:	2000      	movs	r0, #0
 800376e:	e008      	b.n	8003782 <_printf_common+0xb2>
 8003770:	2301      	movs	r3, #1
 8003772:	4652      	mov	r2, sl
 8003774:	4649      	mov	r1, r9
 8003776:	4638      	mov	r0, r7
 8003778:	47c0      	blx	r8
 800377a:	3001      	adds	r0, #1
 800377c:	d103      	bne.n	8003786 <_printf_common+0xb6>
 800377e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003786:	3501      	adds	r5, #1
 8003788:	e7c1      	b.n	800370e <_printf_common+0x3e>
 800378a:	2030      	movs	r0, #48	; 0x30
 800378c:	18e1      	adds	r1, r4, r3
 800378e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003798:	4422      	add	r2, r4
 800379a:	3302      	adds	r3, #2
 800379c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037a0:	e7c2      	b.n	8003728 <_printf_common+0x58>
 80037a2:	2301      	movs	r3, #1
 80037a4:	4622      	mov	r2, r4
 80037a6:	4649      	mov	r1, r9
 80037a8:	4638      	mov	r0, r7
 80037aa:	47c0      	blx	r8
 80037ac:	3001      	adds	r0, #1
 80037ae:	d0e6      	beq.n	800377e <_printf_common+0xae>
 80037b0:	3601      	adds	r6, #1
 80037b2:	e7d9      	b.n	8003768 <_printf_common+0x98>

080037b4 <_printf_i>:
 80037b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b8:	7e0f      	ldrb	r7, [r1, #24]
 80037ba:	4691      	mov	r9, r2
 80037bc:	2f78      	cmp	r7, #120	; 0x78
 80037be:	4680      	mov	r8, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	469a      	mov	sl, r3
 80037c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037ca:	d807      	bhi.n	80037dc <_printf_i+0x28>
 80037cc:	2f62      	cmp	r7, #98	; 0x62
 80037ce:	d80a      	bhi.n	80037e6 <_printf_i+0x32>
 80037d0:	2f00      	cmp	r7, #0
 80037d2:	f000 80d5 	beq.w	8003980 <_printf_i+0x1cc>
 80037d6:	2f58      	cmp	r7, #88	; 0x58
 80037d8:	f000 80c1 	beq.w	800395e <_printf_i+0x1aa>
 80037dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037e4:	e03a      	b.n	800385c <_printf_i+0xa8>
 80037e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037ea:	2b15      	cmp	r3, #21
 80037ec:	d8f6      	bhi.n	80037dc <_printf_i+0x28>
 80037ee:	a101      	add	r1, pc, #4	; (adr r1, 80037f4 <_printf_i+0x40>)
 80037f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037f4:	0800384d 	.word	0x0800384d
 80037f8:	08003861 	.word	0x08003861
 80037fc:	080037dd 	.word	0x080037dd
 8003800:	080037dd 	.word	0x080037dd
 8003804:	080037dd 	.word	0x080037dd
 8003808:	080037dd 	.word	0x080037dd
 800380c:	08003861 	.word	0x08003861
 8003810:	080037dd 	.word	0x080037dd
 8003814:	080037dd 	.word	0x080037dd
 8003818:	080037dd 	.word	0x080037dd
 800381c:	080037dd 	.word	0x080037dd
 8003820:	08003967 	.word	0x08003967
 8003824:	0800388d 	.word	0x0800388d
 8003828:	08003921 	.word	0x08003921
 800382c:	080037dd 	.word	0x080037dd
 8003830:	080037dd 	.word	0x080037dd
 8003834:	08003989 	.word	0x08003989
 8003838:	080037dd 	.word	0x080037dd
 800383c:	0800388d 	.word	0x0800388d
 8003840:	080037dd 	.word	0x080037dd
 8003844:	080037dd 	.word	0x080037dd
 8003848:	08003929 	.word	0x08003929
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	1d1a      	adds	r2, r3, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	602a      	str	r2, [r5, #0]
 8003854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800385c:	2301      	movs	r3, #1
 800385e:	e0a0      	b.n	80039a2 <_printf_i+0x1ee>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	682b      	ldr	r3, [r5, #0]
 8003864:	0607      	lsls	r7, r0, #24
 8003866:	f103 0104 	add.w	r1, r3, #4
 800386a:	6029      	str	r1, [r5, #0]
 800386c:	d501      	bpl.n	8003872 <_printf_i+0xbe>
 800386e:	681e      	ldr	r6, [r3, #0]
 8003870:	e003      	b.n	800387a <_printf_i+0xc6>
 8003872:	0646      	lsls	r6, r0, #25
 8003874:	d5fb      	bpl.n	800386e <_printf_i+0xba>
 8003876:	f9b3 6000 	ldrsh.w	r6, [r3]
 800387a:	2e00      	cmp	r6, #0
 800387c:	da03      	bge.n	8003886 <_printf_i+0xd2>
 800387e:	232d      	movs	r3, #45	; 0x2d
 8003880:	4276      	negs	r6, r6
 8003882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003886:	230a      	movs	r3, #10
 8003888:	4859      	ldr	r0, [pc, #356]	; (80039f0 <_printf_i+0x23c>)
 800388a:	e012      	b.n	80038b2 <_printf_i+0xfe>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	6820      	ldr	r0, [r4, #0]
 8003890:	1d19      	adds	r1, r3, #4
 8003892:	6029      	str	r1, [r5, #0]
 8003894:	0605      	lsls	r5, r0, #24
 8003896:	d501      	bpl.n	800389c <_printf_i+0xe8>
 8003898:	681e      	ldr	r6, [r3, #0]
 800389a:	e002      	b.n	80038a2 <_printf_i+0xee>
 800389c:	0641      	lsls	r1, r0, #25
 800389e:	d5fb      	bpl.n	8003898 <_printf_i+0xe4>
 80038a0:	881e      	ldrh	r6, [r3, #0]
 80038a2:	2f6f      	cmp	r7, #111	; 0x6f
 80038a4:	bf0c      	ite	eq
 80038a6:	2308      	moveq	r3, #8
 80038a8:	230a      	movne	r3, #10
 80038aa:	4851      	ldr	r0, [pc, #324]	; (80039f0 <_printf_i+0x23c>)
 80038ac:	2100      	movs	r1, #0
 80038ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038b2:	6865      	ldr	r5, [r4, #4]
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	bfa8      	it	ge
 80038b8:	6821      	ldrge	r1, [r4, #0]
 80038ba:	60a5      	str	r5, [r4, #8]
 80038bc:	bfa4      	itt	ge
 80038be:	f021 0104 	bicge.w	r1, r1, #4
 80038c2:	6021      	strge	r1, [r4, #0]
 80038c4:	b90e      	cbnz	r6, 80038ca <_printf_i+0x116>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d04b      	beq.n	8003962 <_printf_i+0x1ae>
 80038ca:	4615      	mov	r5, r2
 80038cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80038d0:	fb03 6711 	mls	r7, r3, r1, r6
 80038d4:	5dc7      	ldrb	r7, [r0, r7]
 80038d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038da:	4637      	mov	r7, r6
 80038dc:	42bb      	cmp	r3, r7
 80038de:	460e      	mov	r6, r1
 80038e0:	d9f4      	bls.n	80038cc <_printf_i+0x118>
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d10b      	bne.n	80038fe <_printf_i+0x14a>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	07de      	lsls	r6, r3, #31
 80038ea:	d508      	bpl.n	80038fe <_printf_i+0x14a>
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	6861      	ldr	r1, [r4, #4]
 80038f0:	4299      	cmp	r1, r3
 80038f2:	bfde      	ittt	le
 80038f4:	2330      	movle	r3, #48	; 0x30
 80038f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80038fe:	1b52      	subs	r2, r2, r5
 8003900:	6122      	str	r2, [r4, #16]
 8003902:	464b      	mov	r3, r9
 8003904:	4621      	mov	r1, r4
 8003906:	4640      	mov	r0, r8
 8003908:	f8cd a000 	str.w	sl, [sp]
 800390c:	aa03      	add	r2, sp, #12
 800390e:	f7ff fedf 	bl	80036d0 <_printf_common>
 8003912:	3001      	adds	r0, #1
 8003914:	d14a      	bne.n	80039ac <_printf_i+0x1f8>
 8003916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800391a:	b004      	add	sp, #16
 800391c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	f043 0320 	orr.w	r3, r3, #32
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	2778      	movs	r7, #120	; 0x78
 800392a:	4832      	ldr	r0, [pc, #200]	; (80039f4 <_printf_i+0x240>)
 800392c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	6829      	ldr	r1, [r5, #0]
 8003934:	061f      	lsls	r7, r3, #24
 8003936:	f851 6b04 	ldr.w	r6, [r1], #4
 800393a:	d402      	bmi.n	8003942 <_printf_i+0x18e>
 800393c:	065f      	lsls	r7, r3, #25
 800393e:	bf48      	it	mi
 8003940:	b2b6      	uxthmi	r6, r6
 8003942:	07df      	lsls	r7, r3, #31
 8003944:	bf48      	it	mi
 8003946:	f043 0320 	orrmi.w	r3, r3, #32
 800394a:	6029      	str	r1, [r5, #0]
 800394c:	bf48      	it	mi
 800394e:	6023      	strmi	r3, [r4, #0]
 8003950:	b91e      	cbnz	r6, 800395a <_printf_i+0x1a6>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	f023 0320 	bic.w	r3, r3, #32
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	2310      	movs	r3, #16
 800395c:	e7a6      	b.n	80038ac <_printf_i+0xf8>
 800395e:	4824      	ldr	r0, [pc, #144]	; (80039f0 <_printf_i+0x23c>)
 8003960:	e7e4      	b.n	800392c <_printf_i+0x178>
 8003962:	4615      	mov	r5, r2
 8003964:	e7bd      	b.n	80038e2 <_printf_i+0x12e>
 8003966:	682b      	ldr	r3, [r5, #0]
 8003968:	6826      	ldr	r6, [r4, #0]
 800396a:	1d18      	adds	r0, r3, #4
 800396c:	6961      	ldr	r1, [r4, #20]
 800396e:	6028      	str	r0, [r5, #0]
 8003970:	0635      	lsls	r5, r6, #24
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	d501      	bpl.n	800397a <_printf_i+0x1c6>
 8003976:	6019      	str	r1, [r3, #0]
 8003978:	e002      	b.n	8003980 <_printf_i+0x1cc>
 800397a:	0670      	lsls	r0, r6, #25
 800397c:	d5fb      	bpl.n	8003976 <_printf_i+0x1c2>
 800397e:	8019      	strh	r1, [r3, #0]
 8003980:	2300      	movs	r3, #0
 8003982:	4615      	mov	r5, r2
 8003984:	6123      	str	r3, [r4, #16]
 8003986:	e7bc      	b.n	8003902 <_printf_i+0x14e>
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	2100      	movs	r1, #0
 800398c:	1d1a      	adds	r2, r3, #4
 800398e:	602a      	str	r2, [r5, #0]
 8003990:	681d      	ldr	r5, [r3, #0]
 8003992:	6862      	ldr	r2, [r4, #4]
 8003994:	4628      	mov	r0, r5
 8003996:	f000 f859 	bl	8003a4c <memchr>
 800399a:	b108      	cbz	r0, 80039a0 <_printf_i+0x1ec>
 800399c:	1b40      	subs	r0, r0, r5
 800399e:	6060      	str	r0, [r4, #4]
 80039a0:	6863      	ldr	r3, [r4, #4]
 80039a2:	6123      	str	r3, [r4, #16]
 80039a4:	2300      	movs	r3, #0
 80039a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039aa:	e7aa      	b.n	8003902 <_printf_i+0x14e>
 80039ac:	462a      	mov	r2, r5
 80039ae:	4649      	mov	r1, r9
 80039b0:	4640      	mov	r0, r8
 80039b2:	6923      	ldr	r3, [r4, #16]
 80039b4:	47d0      	blx	sl
 80039b6:	3001      	adds	r0, #1
 80039b8:	d0ad      	beq.n	8003916 <_printf_i+0x162>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	079b      	lsls	r3, r3, #30
 80039be:	d413      	bmi.n	80039e8 <_printf_i+0x234>
 80039c0:	68e0      	ldr	r0, [r4, #12]
 80039c2:	9b03      	ldr	r3, [sp, #12]
 80039c4:	4298      	cmp	r0, r3
 80039c6:	bfb8      	it	lt
 80039c8:	4618      	movlt	r0, r3
 80039ca:	e7a6      	b.n	800391a <_printf_i+0x166>
 80039cc:	2301      	movs	r3, #1
 80039ce:	4632      	mov	r2, r6
 80039d0:	4649      	mov	r1, r9
 80039d2:	4640      	mov	r0, r8
 80039d4:	47d0      	blx	sl
 80039d6:	3001      	adds	r0, #1
 80039d8:	d09d      	beq.n	8003916 <_printf_i+0x162>
 80039da:	3501      	adds	r5, #1
 80039dc:	68e3      	ldr	r3, [r4, #12]
 80039de:	9903      	ldr	r1, [sp, #12]
 80039e0:	1a5b      	subs	r3, r3, r1
 80039e2:	42ab      	cmp	r3, r5
 80039e4:	dcf2      	bgt.n	80039cc <_printf_i+0x218>
 80039e6:	e7eb      	b.n	80039c0 <_printf_i+0x20c>
 80039e8:	2500      	movs	r5, #0
 80039ea:	f104 0619 	add.w	r6, r4, #25
 80039ee:	e7f5      	b.n	80039dc <_printf_i+0x228>
 80039f0:	08003b57 	.word	0x08003b57
 80039f4:	08003b68 	.word	0x08003b68

080039f8 <memmove>:
 80039f8:	4288      	cmp	r0, r1
 80039fa:	b510      	push	{r4, lr}
 80039fc:	eb01 0402 	add.w	r4, r1, r2
 8003a00:	d902      	bls.n	8003a08 <memmove+0x10>
 8003a02:	4284      	cmp	r4, r0
 8003a04:	4623      	mov	r3, r4
 8003a06:	d807      	bhi.n	8003a18 <memmove+0x20>
 8003a08:	1e43      	subs	r3, r0, #1
 8003a0a:	42a1      	cmp	r1, r4
 8003a0c:	d008      	beq.n	8003a20 <memmove+0x28>
 8003a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a16:	e7f8      	b.n	8003a0a <memmove+0x12>
 8003a18:	4601      	mov	r1, r0
 8003a1a:	4402      	add	r2, r0
 8003a1c:	428a      	cmp	r2, r1
 8003a1e:	d100      	bne.n	8003a22 <memmove+0x2a>
 8003a20:	bd10      	pop	{r4, pc}
 8003a22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a2a:	e7f7      	b.n	8003a1c <memmove+0x24>

08003a2c <_sbrk_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	2300      	movs	r3, #0
 8003a30:	4d05      	ldr	r5, [pc, #20]	; (8003a48 <_sbrk_r+0x1c>)
 8003a32:	4604      	mov	r4, r0
 8003a34:	4608      	mov	r0, r1
 8003a36:	602b      	str	r3, [r5, #0]
 8003a38:	f7fc fdaa 	bl	8000590 <_sbrk>
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d102      	bne.n	8003a46 <_sbrk_r+0x1a>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	b103      	cbz	r3, 8003a46 <_sbrk_r+0x1a>
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
 8003a48:	20000264 	.word	0x20000264

08003a4c <memchr>:
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	b2c9      	uxtb	r1, r1
 8003a52:	4402      	add	r2, r0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	d101      	bne.n	8003a5e <memchr+0x12>
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	e003      	b.n	8003a66 <memchr+0x1a>
 8003a5e:	7804      	ldrb	r4, [r0, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	428c      	cmp	r4, r1
 8003a64:	d1f6      	bne.n	8003a54 <memchr+0x8>
 8003a66:	bd10      	pop	{r4, pc}

08003a68 <memcpy>:
 8003a68:	440a      	add	r2, r1
 8003a6a:	4291      	cmp	r1, r2
 8003a6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a70:	d100      	bne.n	8003a74 <memcpy+0xc>
 8003a72:	4770      	bx	lr
 8003a74:	b510      	push	{r4, lr}
 8003a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a7a:	4291      	cmp	r1, r2
 8003a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a80:	d1f9      	bne.n	8003a76 <memcpy+0xe>
 8003a82:	bd10      	pop	{r4, pc}

08003a84 <_realloc_r>:
 8003a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a88:	4680      	mov	r8, r0
 8003a8a:	4614      	mov	r4, r2
 8003a8c:	460e      	mov	r6, r1
 8003a8e:	b921      	cbnz	r1, 8003a9a <_realloc_r+0x16>
 8003a90:	4611      	mov	r1, r2
 8003a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a96:	f7ff bc37 	b.w	8003308 <_malloc_r>
 8003a9a:	b92a      	cbnz	r2, 8003aa8 <_realloc_r+0x24>
 8003a9c:	f7ff fbcc 	bl	8003238 <_free_r>
 8003aa0:	4625      	mov	r5, r4
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa8:	f000 f81b 	bl	8003ae2 <_malloc_usable_size_r>
 8003aac:	4284      	cmp	r4, r0
 8003aae:	4607      	mov	r7, r0
 8003ab0:	d802      	bhi.n	8003ab8 <_realloc_r+0x34>
 8003ab2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ab6:	d812      	bhi.n	8003ade <_realloc_r+0x5a>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4640      	mov	r0, r8
 8003abc:	f7ff fc24 	bl	8003308 <_malloc_r>
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d0ed      	beq.n	8003aa2 <_realloc_r+0x1e>
 8003ac6:	42bc      	cmp	r4, r7
 8003ac8:	4622      	mov	r2, r4
 8003aca:	4631      	mov	r1, r6
 8003acc:	bf28      	it	cs
 8003ace:	463a      	movcs	r2, r7
 8003ad0:	f7ff ffca 	bl	8003a68 <memcpy>
 8003ad4:	4631      	mov	r1, r6
 8003ad6:	4640      	mov	r0, r8
 8003ad8:	f7ff fbae 	bl	8003238 <_free_r>
 8003adc:	e7e1      	b.n	8003aa2 <_realloc_r+0x1e>
 8003ade:	4635      	mov	r5, r6
 8003ae0:	e7df      	b.n	8003aa2 <_realloc_r+0x1e>

08003ae2 <_malloc_usable_size_r>:
 8003ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae6:	1f18      	subs	r0, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bfbc      	itt	lt
 8003aec:	580b      	ldrlt	r3, [r1, r0]
 8003aee:	18c0      	addlt	r0, r0, r3
 8003af0:	4770      	bx	lr
	...

08003af4 <_init>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr

08003b00 <_fini>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr
